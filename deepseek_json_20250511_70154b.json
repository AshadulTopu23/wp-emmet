{
  "Elementor": {
    "Widget Boilerplate": {
      "prefix": "Ewidget",
      "body": [
        "<?php",
        "/**",
        " * ${1:Widget Name}",
        " *",
        " * @package ${2:Package}",
        " */",
        "",
        "namespace ${3:Namespace};",
        "",
        "use Elementor\\Widget_Base;",
        "use Elementor\\Controls_Manager;",
        "use Elementor\\Group_Control_Typography;",
        "use Elementor\\Group_Control_Background;",
        "use Elementor\\Group_Control_Border;",
        "use Elementor\\Group_Control_Box_Shadow;",
        "",
        "class ${4:Widget_Class_Name} extends Widget_Base {",
        "",
        "public function get_name() {",
        "return '${5:widget-name}';",
        "}",
        "",
        "public function get_title() {",
        "return __( '${6:Widget Title}', '${7:text-domain}' );",
        "}",
        "",
        "public function get_icon() {",
        "return '${8:eicon-icon-name}';",
        "}",
        "",
        "public function get_categories() {",
        "return [ '${9:category-name}' ];",
        "}",
        "",
        "protected function _register_controls() {",
        "// Content Tab",
        "$this->start_controls_section(",
        "'content_section',",
        "[",
        "'label' => esc_html__( 'Content', '${7:text-domain}' ),",
        "'tab' => Controls_Manager::TAB_CONTENT,",
        "]",
        ");",
        "",
        "// Add controls here",
        "",
        "$this->end_controls_section();",
        "",
        "// Style Tab",
        "$this->start_controls_section(",
        "'style_section',",
        "[",
        "'label' => esc_html__( 'Style', '${7:text-domain}' ),",
        "'tab' => Controls_Manager::TAB_STYLE,",
        "]",
        ");",
        "",
        "// Add style controls here",
        "",
        "$this->end_controls_section();",
        "}",
        "",
        "protected function render() {",
        "$settings = $this->get_settings_for_display();",
        "?>",
        "<div class=\"${1:widget-class}\">",
        "<?php if ( ! empty( \$settings['title'] ) ) : ?>",
        "<h2><?php echo esc_html( \$settings['title'] ); ?></h2>",
        "<?php endif; ?>",
        "</div>",
        "<?php",
        "}",
        "",
        "protected function _content_template() {",
        "?>",
        "<#",
        "if ( settings.title ) { #>",
        "<h2>{{{ settings.title }}}</h2>",
        "<# } #>",
        "<?php",
        "}",
        "}"
      ],
      "description": "Complete Elementor widget boilerplate"
    },
    "Content Section": {
      "prefix": "Econtentstart",
      "body": [
        "$this->start_controls_section(",
        "'content',",
        "[",
        "'label' => esc_html__('', 'plugin-name')",
        "]",
        ");",
        "",
        "$this->end_controls_section();"
      ],
      "description": "Starts a content section"
    },
    "Style Section": {
      "prefix": "Estylestart",
      "body": [
        "$this->start_controls_section(",
        "'style',",
        "[",
        "'label' => esc_html__('', 'plugin-name'),",
        "'tab'   => Controls_Manager::TAB_STYLE,",
        "]",
        ");",
        "",
        "$this->end_controls_section();"
      ],
      "description": "Starts a style section"
    },
    "Text Control": {
      "prefix": "Etext",
      "body": [
        "$this->add_control(",
        "'title',",
        "[",
        "'label' => esc_html__( 'Title', 'plugin-name' ),",
        "'type' => \\Elementor\\Controls_Manager::TEXT,",
        "'default' => esc_html__( 'Default title', 'plugin-name' ),",
        "'label_block' => true,",
        "]",
        ");"
      ],
      "description": "Adds a text control"
    },
    "Textarea Control": {
      "prefix": "Etextarea",
      "body": [
        "$this->add_control(",
        "'description',",
        "[",
        "'label' => esc_html__( 'Description', 'plugin-name' ),",
        "'type' => \\Elementor\\Controls_Manager::TEXTAREA,",
        "'rows' => 10,",
        "'default' => esc_html__( 'Default description', 'plugin-name' ),",
        "]",
        ");"
      ],
      "description": "Adds a textarea control"
    },
    "WYSIWYG Editor": {
      "prefix": "Ewysiwyg",
      "body": [
        "$this->add_control(",
        "'item_description',",
        "[",
        "'label' => esc_html__( 'Description', 'plugin-name' ),",
        "'type' => \\Elementor\\Controls_Manager::WYSIWYG,",
        "'default' => esc_html__( 'Default description', 'plugin-name' ),",
        "]",
        ");"
      ],
      "description": "Adds a WYSIWYG editor"
    },
    "Select Control": {
      "prefix": "Eselect",
      "body": [
        "$this->add_control(",
        "'style_design',",
        "[",
        "'label'     => esc_html__( 'Style', 'plugin-name' ),",
        "'type'      => \\Elementor\\Controls_Manager::SELECT,",
        "'default'   => 'style_one',",
        "'options'   => [",
        "'style_one' => esc_html__( 'Style One', 'plugin-name' ),",
        "'style_two' => esc_html__( 'Style Two', 'plugin-name' ),",
        "],",
        "]",
        ");"
      ],
      "description": "Adds a select dropdown"
    },
    "Color Picker": {
      "prefix": "Ecolor",
      "body": [
        "$this->add_control(",
        "'spinner_color',",
        "[",
        "'label' => esc_html__( 'Color', 'plugin-name' ),",
        "'type' => \\Elementor\\Controls_Manager::COLOR,",
        "'selectors' => [",
        "'{{WRAPPER}} .title' => 'color: {{VALUE}} !important',",
        "],",
        "]",
        ");"
      ],
      "description": "Adds a color picker"
    },
    "Image Control": {
      "prefix": "Eimage",
      "body": [
        "$this->add_control(",
        "'image',",
        "[",
        "'label' => esc_html__( 'Choose Image', 'plugin-name' ),",
        "'type' => \\Elementor\\Controls_Manager::MEDIA,",
        "'default' => [",
        "'url' => \\Elementor\\Utils::get_placeholder_image_src(),",
        "],",
        "]",
        ");"
      ],
      "description": "Adds an image upload"
    },
    "Icon Picker": {
      "prefix": "Eicon",
      "body": [
        "$this->add_control(",
        "'spinner_icon',",
        "[",
        "'label' => esc_html__( 'Icon', 'plugin-name' ),",
        "'type' => \\Elementor\\Controls_Manager::ICONS,",
        "'default' => [",
        "'value' => 'fas fa-star',",
        "'library' => 'solid',",
        "],",
        "]",
        ");"
      ],
      "description": "Adds an icon picker"
    },
    "Slider Control": {
      "prefix": "Eslider",
      "body": [
        "$this->add_responsive_control(",
        "'icon_size',",
        "[",
        "'label' => esc_html__( 'Size', 'plugin-name' ),",
        "'type' => \\Elementor\\Controls_Manager::SLIDER,",
        "'size_units' => [ 'px', '%' ],",
        "'range' => [",
        "'px' => [",
        "'min' => 1,",
        "'max' => 100,",
        "'step' => 1,",
        "],",
        "'%' => [",
        "'min' => 1,",
        "'max' => 100,",
        "],",
        "],",
        "'selectors' => [",
        "'{{WRAPPER}} .icon svg' => 'width: {{SIZE}}{{UNIT}};',",
        "],",
        "]",
        ");"
      ],
      "description": "Adds a slider control"
    },
    "Switch Control": {
      "prefix": "Eswitch",
      "body": [
        "$this->add_control(",
        "'spinner_show',",
        "[",
        "'label' => esc_html__( 'Show Navigation', 'plugin-name' ),",
        "'type' => \\Elementor\\Controls_Manager::SWITCHER,",
        "'label_on' => esc_html__( 'Show', 'plugin-name' ),",
        "'label_off' => esc_html__( 'Hide', 'plugin-name' ),",
        "'return_value' => 'yes',",
        "'default' => 'yes',",
        "]",
        ");"
      ],
      "description": "Adds a switch control"
    },
    "Repeater Control": {
      "prefix": "Erepeater",
      "body": [
        "$repeater = new \\Elementor\\Repeater();",
        "",
        "$repeater->add_control(",
        "'list_title', [",
        "'label' => esc_html__( 'Title', 'plugin-name' ),",
        "'type' => \\Elementor\\Controls_Manager::TEXT,",
        "'default' => esc_html__( 'List Title' , 'plugin-name' ),",
        "'label_block' => true,",
        "]",
        ");",
        "",
        "$repeater->add_control(",
        "'list_content', [",
        "'label' => esc_html__( 'Content', 'plugin-name' ),",
        "'type' => \\Elementor\\Controls_Manager::WYSIWYG,",
        "'default' => esc_html__( 'List Content' , 'plugin-name' ),",
        "'show_label' => false,",
        "]",
        ");",
        "",
        "$this->add_control(",
        "'list_repeater',",
        "[",
        "'label' => esc_html__( 'Repeater List', 'plugin-name' ),",
        "'type' => \\Elementor\\Controls_Manager::REPEATER,",
        "'fields' => $repeater->get_controls(),",
        "'default' => [",
        "[",
        "'list_title' => esc_html__( 'Title #1', 'plugin-name' ),",
        "'list_content' => esc_html__( 'Item content. Click the edit button to change this text.', 'plugin-name' ),",
        "],",
        "[",
        "'list_title' => esc_html__( 'Title #2', 'plugin-name' ),",
        "'list_content' => esc_html__( 'Item content. Click the edit button to change this text.', 'plugin-name' ),",
        "],",
        "],",
        "'title_field' => '{{{ list_title }}}',",
        "]",
        ");"
      ],
      "description": "Adds a repeater control"
    },
    "Typography Group": {
      "prefix": "Etypo",
      "body": [
        "$this->add_group_control(",
        "Group_Control_Typography::get_type(),",
        "[",
        "'name' => 'spinner_typography',",
        "'selector' => '{{WRAPPER}} .title',",
        "]",
        ");"
      ],
      "description": "Adds typography control"
    },
    "Background Group": {
      "prefix": "Ebackground",
      "body": [
        "$this->add_group_control(",
        "Group_Control_Background::get_type(),",
        "[",
        "'name' => 'background',",
        "'label' => esc_html__( 'Background', 'plugin-name' ),",
        "'types' => [ 'classic', 'gradient', 'video' ],",
        "'selector' => '{{WRAPPER}} .title',",
        "]",
        ");"
      ],
      "description": "Adds background control"
    },
    "Border Group": {
      "prefix": "Eborder",
      "body": [
        "$this->add_group_control(",
        "Group_Control_Border::get_type(),",
        "[",
        "'name' => 'banner_button_border',",
        "'label' => esc_html__('Border', 'plugin-name'),",
        "'selector' => '{{WRAPPER}} .btn--primary-outline',",
        "]",
        ");"
      ],
      "description": "Adds border control"
    },
    "Box Shadow Group": {
      "prefix": "Eboxshadow",
      "body": [
        "$this->add_group_control(",
        "Group_Control_Box_Shadow::get_type(),",
        "[",
        "'name' => 'box_shadow',",
        "'selector' => '{{WRAPPER}} .your-class',",
        "]",
        ");"
      ],
      "description": "Adds box shadow"
    },
    "Tabs": {
      "prefix": "Etabs",
      "body": [
        "$this->start_controls_tabs(",
        "'style_tabs'",
        ");",
        "",
        "$this->start_controls_tab(",
        "'style_normal_tab',",
        "[",
        "'label' => esc_html__( 'Normal', 'plugin-name' ),",
        "]",
        ");",
        "",
        "$this->add_control();",
        "",
        "$this->end_controls_tab();",
        "$this->start_controls_tab(",
        "'style_hover_tab',",
        "[",
        "'label' => esc_html__( 'Hover', 'plugin-name' ),",
        "]",
        ");",
        "",
        "$this->add_control();",
        "",
        "$this->end_controls_tab();",
        "",
        "$this->end_controls_tabs();"
      ],
      "description": "Adds control tabs"
    },
    "Margin Control": {
      "prefix": "Emargin",
      "body": [
        "$this->add_responsive_control(",
        "'spinner_margin',",
        "[",
        "'label' => esc_html__( 'Margin', 'plugin-name' ),",
        "'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "'size_units' => [ 'px', '%', 'em' ],",
        "'selectors' => [",
        "'{{WRAPPER}} .title' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',",
        "],",
        "]",
        ");"
      ],
      "description": "Adds margin control"
    },
    "Padding Control": {
      "prefix": "Epadding",
      "body": [
        "$this->add_responsive_control(",
        "'spinner_padding',",
        "[",
        "'label' => esc_html__( 'Padding', 'plugin-name' ),",
        "'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "'size_units' => [ 'px', '%' ],",
        "'selectors' => [",
        "'{{WRAPPER}} .title' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',",
        "],",
        "]",
        ");"
      ],
      "description": "Adds padding control"
    },
    "Link Control": {
      "prefix": "Elink",
      "body": [
        "$this->add_control(",
        "'website_link',",
        "[",
        "'label' => esc_html__( 'Link', 'plugin-name' ),",
        "'type' => \\Elementor\\Controls_Manager::URL,",
        "'placeholder' => esc_html__( 'https://your-link.com', 'plugin-name' ),",
        "'default' => [",
        "'url' => '#',",
        "'is_external' => true,",
        "'nofollow' => true,",
        "'custom_attributes' => '',",
        "],",
        "'label_block' => true,",
        "]",
        ");"
      ],
      "description": "Adds link control"
    },
    "Render Icon": {
      "prefix": "Erendericon",
      "body": [
        "<?php \\Elementor\\Icons_Manager::render_icon( \$settings['icon'], [ 'aria-hidden' => 'true' ] ); ?>"
      ],
      "description": "Renders an icon"
    }
  },
  "WordPress": {
    "Post Title": {
      "prefix": "Wtitle",
      "body": ["<?php the_title(); ?>"],
      "description": "Outputs post title"
    },
    "Post Content": {
      "prefix": "Wcontent",
      "body": ["<?php the_content(); ?>"],
      "description": "Outputs post content"
    },
    "Featured Image URL": {
      "prefix": "Wthumbnailurl",
      "body": ["<?php the_post_thumbnail_url(); ?>"],
      "description": "Outputs featured image URL"
    },
    "Post Loop": {
      "prefix": "Wloop",
      "body": [
        "<?php if ( have_posts() ) : ?>",
        "<?php while ( have_posts() ) : the_post(); ?>",
        "<!-- Content -->",
        "<?php endwhile; ?>",
        "<?php endif; ?>"
      ],
      "description": "Standard WordPress loop"
    },
    "Simple Post Loop": {
      "prefix": "Wloopsimple",
      "body": [
        "<?php",
        "if ( have_posts() ) {",
        "while ( have_posts() ) {",
        "the_post();",
        "",
        "}",
        "}",
        "?>"
      ],
      "description": "Simplified WordPress loop"
    },
    "Theme Directory URI": {
      "prefix": "Wthemeuri",
      "body": ["<?php echo get_template_directory_uri(); ?>/"],
      "description": "Outputs theme directory URI"
    },
    "ACF Conditional": {
      "prefix": "Wacfif",
      "body": [
        "<?php if( get_field('field_name') ): ?>",
        "<p>My field value: <?php the_field('field_name'); ?></p>",
        "<?php endif; ?>"
      ],
      "description": "Conditional ACF field output"
    },
    "ACF Repeater Loop": {
      "prefix": "Wacfforeach",
      "body": [
        "<?php",
        "$ff = get_field('contact_us_content','option');",
        "foreach ($ff as $fff) {",
        "?>",
        "<li><i class=\"fa <?php echo $fff['icon']; ?>\"></i><?php echo $fff['info']; ?></li>",
        "<?php",
        "}",
        "?>"
      ],
      "description": "Loops through ACF repeater"
    },
    "Plugin Header": {
      "prefix": "Wpluginheader",
      "body": [
        "/**",
        " * Plugin Name:       My Basics Plugin",
        " * Plugin URI:        https://example.com/plugins/the-basics/",
        " * Description:       Handle the basics with this plugin.",
        " * Version:           1.10.3",
        " * Requires at least: 5.2",
        " * Requires PHP:      7.2",
        " * Author:            John Smith",
        " * Author URI:        https://author.example.com/",
        " * License:           GPL v2 or later",
        " * License URI:       https://www.gnu.org/licenses/gpl-2.0.html",
        " * Update URI:        https://example.com/my-plugin/",
        " * Text Domain:       my-basics-plugin",
        " * Domain Path:       /languages",
        " */"
      ],
      "description": "Plugin header comment"
    },
    "Plugin Hooks": {
      "prefix": "Wpluginhooks",
      "body": [
        "function wordcount_activation_hook() {",
        "}",
        "register_activation_hook( __FILE__, 'wordcount_activation_hook' );",
        "",
        "function wordcount_deactivation_hook() {",
        "}",
        "register_deactivation_hook( __FILE__, 'wordcount_deactivation_hook' );"
      ],
      "description": "Plugin activation/deactivation hooks"
    }
  },
  "JavaScript": {
    "Style Change": {
      "prefix": "Jstyle",
      "body": ["document.getElementById('demo').style.color = 'red';"],
      "description": "Changes element style"
    },
    "Inner HTML": {
      "prefix": "Jinnerhtml",
      "body": ["document.getElementById('demo').innerHTML = 'Hello JavaScript!';"],
      "description": "Sets element innerHTML"
    },
    "Class Inner HTML": {
      "prefix": "Jclasshtml",
      "body": ["document.getElementsByClassName('demo')[0].innerHTML = 'Hello JavaScript!';"],
      "description": "Sets innerHTML by class"
    },
    "Change SRC": {
      "prefix": "Jsrc",
      "body": ["document.getElementById('a').src = 'on.gif';"],
      "description": "Changes image source"
    },
    "Document Write": {
      "prefix": "Jwrite",
      "body": ["document.write();"],
      "description": "Writes to document"
    },
    "Query Selector": {
      "prefix": "Jqueryselector",
      "body": ["document.querySelector('.example').style.backgroundColor = 'red';"],
      "description": "Sets style via querySelector"
    },
    "Event Listener": {
      "prefix": "Jeventlistener",
      "body": [
        "document.getElementById('myBtn').addEventListener('click', work);",
        "",
        "function work() {",
        "document.getElementById('demo').innerHTML = Date();",
        "}"
      ],
      "description": "Adds click event listener"
    },
    "Console Log": {
      "prefix": "Jlog",
      "body": ["console.log($1);"],
      "description": "Logs to console"
    },
    "ForEach Loop": {
      "prefix": "Jforeach",
      "body": [
        "array.forEach(function(element) {",
        "console.log(element);",
        "});"
      ],
      "description": "JavaScript forEach loop"
    }
  },
  "PHP": {
    "Function": {
      "prefix": "Pfunction",
      "body": [
        "function ${1:function_name}() {",
        "$2",
        "}"
      ],
      "description": "Creates PHP function"
    },
    "If Statement": {
      "prefix": "Pif",
      "body": [
        "if ($1) {",
        "$2",
        "}"
      ],
      "description": "PHP if statement"
    },
    "Foreach Loop": {
      "prefix": "Pforeach",
      "body": [
        "foreach ($${1:array} as $${2:item}) {",
        "$3",
        "}"
      ],
      "description": "PHP foreach loop"
    },
    "Echo": {
      "prefix": "Pecho",
      "body": ["echo $1;"],
      "description": "PHP echo statement"
    },
    "Variable": {
      "prefix": "Pvar",
      "body": ["$${1:variable} = $2;"],
      "description": "Declares PHP variable"
    },
    "Array": {
      "prefix": "Parray",
      "body": ["$${1:array} = [$2];"],
      "description": "Creates PHP array"
    },
    "Class": {
      "prefix": "Pclass",
      "body": [
        "class ${1:ClassName} {",
        "public function __construct() {",
        "$2",
        "}",
        "}"
      ],
      "description": "Creates PHP class"
    }
  },
  "Utility": {
    "Escaped Translation": {
      "prefix": "Uesc",
      "body": [
        "esc_html__( '${1:text}', '${2:text-domain}' )"
      ],
      "description": "Escaped translation"
    },
    "Sanitize HTML": {
      "prefix": "Ukses",
      "body": [
        "wp_kses( \$${1:content}, wp_kses_allowed_html( 'post' ) )"
      ],
      "description": "Sanitizes HTML"
    },
    "Variable Check": {
      "prefix": "Uisset",
      "body": [
        "<?php if ( isset( \$${1:variable} ) : ?>",
        "$2",
        "<?php endif; ?>"
      ],
      "description": "Checks if variable exists"
    },
    "Array": {
      "prefix": "Uarray",
      "body": ["let ${1:array} = [$2];"],
      "description": "Creates JavaScript array"
    },
    "String": {
      "prefix": "Ustring",
      "body": ["let ${1:string} = '$2';"],
      "description": "Declares JavaScript string"
    },
    "Settings Output": {
      "prefix": "Usettings",
      "body": [
        "<?php echo esc_html($settings['']) ?>"
      ],
      "description": "Outputs escaped settings"
    },
    "Conditional Display": {
      "prefix": "Ushow",
      "body": [
        "<?php if( !empty( $settings[''] ) ) : ?>",
        "<?php echo esc_html($settings['']) ?>",
        "<?php endif ?>"
      ],
      "description": "Conditionally displays content"
    }
  }
}