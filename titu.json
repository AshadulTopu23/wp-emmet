{
    // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "wp_title_function": {
      "prefix": "thetitle",
      "body": ["<?php the_title();?>"],
      "description": "wp_title_function"
    },
  
    "wp_content_function": {
      "prefix": "thecontent",
      "body": ["<?php the_content()?>"],
      "description": "wp_content_function"
    },
  
    "wp_post_thumbnail_function": {
      "prefix": "thepostthumbnailurl",
      "body": ["<?php the_post_thumbnail_url()?>"],
      "description": "wp_post_thumbnail_function"
    },
  
    "wp_post_if_function": {
      "prefix": "ifwhiledirect",
      "body": [
        "<?php if ( have_posts() ) : ?>",
        "	<?php while ( have_posts() ) : the_post(); ?>    ",
        "	<!-- do stuff ... -->",
        "	<?php endwhile; ?>",
        "<?php endif; ?>"
      ],
      "description": "wp_post_if_function"
    },
  
    "wp_ewwpost_if_function": {
      "prefix": "ifwhilesimple",
      "body": [
        "<?php ",
        "if ( have_posts() ) {",
        "	while ( have_posts() ) {",
        "		the_post(); ",
        "		",
        "		",
        "	} ",
        "} ",
        "?>"
      ],
      "description": "wp_ewwpost_if_function"
    },
  
    "wp_ewwsspost_if_function": {
      "prefix": "ifimple",
      "body": [
        "<?php ",
        "if ( have_posts() ) {",
        "	while ( have_posts() ) {",
        "		the_post(); ",
        "		",
        "		",
        "	} ",
        "} ",
        "?>"
      ],
      "description": "wp_ewwsspost_if_function"
    },
  
    "wp_ewwsspssost_if_function": {
      "prefix": "ifdirect",
      "body": ["<?php if ( have_posts() ) : ?>", "<?php endif; ?>"],
      "description": "wp_ewwsspssost_if_function"
    },
  
    "location": {
      "prefix": "location",
      "body": ["<?php echo get_template_directory_uri(  )?>/"],
      "description": "location"
    },
    "Style JS": {
      "prefix": "documentstyle",
      "body": ["document.getElementById('demo').style.color='red'"],
      "description": "Style JS"
    },
    "Style jhJS": {
      "prefix": "documentid",
      "body": [
        "document.getElementById(\"demo\").innerHTML = 'Hello JavaScript!'"
      ],
      "description": "Style JS"
    },
  
    "Style JS class": {
      "prefix": "documentclass",
      "body": [
        "document.getElementsByClassName(\"demo\").innerHTML = 'Hello JavaScript!'"
      ],
      "description": "Style JS class"
    },
    "Style JS src": {
      "prefix": "documentsrc",
      "body": ["document.getElementById('a').src='on.gif'"],
      "description": "Style JS src"
    },
    "Style JS dc": {
      "prefix": "dc",
      "body": ["document.write();"],
      "description": "Style JS dc"
    },
    "doc query select": {
      "prefix": "documentquery",
      "body": [
        "document.querySelector(\".example\").style.backgroundColor = \"red\";"
      ],
      "description": "doc query select"
    },
    "eventlistner": {
      "prefix": "eventlistener",
      "body": [
        "document.getElementById(\"myBtn\").addEventListener(\"click\", work);",
        "",
        "function work() {",
        "  document.getElementById(\"demo\").innerHTML = Date();",
        "}"
      ],
      "description": "eventlistner"
    },
    "console": {
      "prefix": "log",
      "body": ["console.log();"],
      "description": "console"
    },
    "jquery ready": {
      "prefix": "jqready",
      "body": ["$(document).ready(function(){", "", "});"],
      "description": "jquery ready"
    },
    "jquery clready": {
      "prefix": "jqclick",
      "body": ["$(\"#loginButton\").click(function(){", "   ", "})"],
      "description": "jquery ready"
    },
  
    "jquery slideup": {
      "prefix": "jqslideup",
      "body": ["$(\"#panel\").slideUp(\"slow\");"],
      "description": "jquery slideup"
    },
    "jquery slidedown": {
      "prefix": "jqslidedown",
      "body": ["$(\"#panel\").slideDown(\"slow\");"],
      "description": "jquery slidedown"
    },
    "jquery slidetoggle": {
      "prefix": "jqslidetoggle",
      "body": ["$(\"#panel\").slideToggle(\"slow\");"],
      "description": "jquery slidetoggle"
    },
    "jquery animatetoggle": {
      "prefix": "jqanimatetoggle",
      "body": ["    $(\"div\").animate({", "      height: 'toggle'", "    });"],
      "description": "jquery animatetoggle"
    },
    "jquery css": {
      "prefix": "jqcss",
      "body": [
        "$(\"p\").css({\"background-color\": \"yellow\", \"font-size\": \"200%\"});"
      ],
      "description": "jquery css"
    },
    "jquery css add": {
      "prefix": "jqcssadd",
      "body": [
        "$(\"h1, h2, p\").addClass(\"blue\");",
        "$(\"div\").addClass(\"important\");"
      ],
      "description": "jquery css add"
    },
    "jquery remove css": {
      "prefix": "jqremovecss",
      "body": ["$(\"h1, h2, p\").removeClass(\"blue\");"],
      "description": "jquery remove css"
    },
    "jquery togglecss": {
      "prefix": "jqtogglecss",
      "body": ["$(\"h1, h2, p\").toggleClass(\"blue\");"],
      "description": "jquery togglecss"
    },
    "jquery append": {
      "prefix": "jqappend",
      "body": ["$(\"p\").append(\" <b>Appended text</b>.\");"],
      "description": "jquery append"
    },
    "jquery prepand": {
      "prefix": "jqprepand",
      "body": [" $(\"ol\").prepend(\"<li>Prepended item</li>\");"],
      "description": "jquery prepand"
    },
    "jquery remove": {
      "prefix": "jqremove",
      "body": ["$(\"p\").remove(\".test\");"],
      "description": "jquery remove"
    },
    "jquery animate": {
      "prefix": "jqanimate",
      "body": [
        "    $(\"div\").animate({",
        "      left: '250px',",
        "      opacity: '0.5',",
        "      height: '150px',",
        "      width: '150px',",
        "      marginLeft : '30px'",
        "    });"
      ],
      "description": "jquery animate"
    },
    "function name": {
      "prefix": "func",
      "body": ["function titu(){", "   ", "}"],
      "description": "function name"
    },
    "break in php": {
      "prefix": "br",
      "body": ["echo \"\\n\";"],
      "description": "break in php"
    },
    "define in php": {
      "prefix": "define",
      "body": [
        "define(\"GREETING\",\"Hello you! How are you today?\");",
        "echo GREETING;"
      ],
      "description": "define in php"
    },
  
    "php foreach": {
      "prefix": "foreach",
      "body": ["foreach ($$variable as $$key => $$value) {", "    ", "}", ""],
      "description": "php foreach"
    },
    "php associative array": {
      "prefix": "associativearray",
      "body": [
        "$$a = array(",
        "    \"\"=>\"\", ",
        "    \"\"=>\"\", ",
        "    \"\"=>\"\"",
        ");",
        ""
      ],
      "description": "php associative array"
    },
    "php multidentional array": {
      "prefix": "multidimentionalarray",
      "body": [
        "$$cars = array (",
        "  array(\"Volvo\",22,18),",
        "  array(\"BMW\",15,13),",
        "  array(\"Saab\",5,2),",
        "  array(\"Land Rover\",17,15)",
        ");",
        ""
      ],
      "description": "php multidentional array"
    },
    "php str position check": {
      "prefix": "strpositioncheck",
      "body": ["strpos(\"Hello world!\", \"world\");", ""],
      "description": "php str position check"
    },
    "php str replace check": {
      "prefix": "strreplace",
      "body": ["str_replace(\"Bacteria\", \"Virus\", \"Hello Bacteria!\");", ""],
      "description": "php str replace check"
    },
    "php simple array": {
      "prefix": "array",
      "body": ["$$a = array(\"\",\"\",\"\");", ""],
      "description": "php simple array"
    },
    "php minimum value": {
      "prefix": "minvalue",
      "body": ["min(20, -8, -200);"],
      "description": "php minimum value"
    },
    "php maxmimum value": {
      "prefix": "maxvalue",
      "body": ["max(20, -8, -200);"],
      "description": "php maxmimum value"
    },
    "php echo": {
      "prefix": "e",
      "body": ["echo"],
      "description": "php echo"
    },
    "php absolute value": {
      "prefix": "abs",
      "body": ["abs(-6.7);"],
      "description": "php absolute value"
    },
    "php root sqrt": {
      "prefix": "root",
      "body": ["sqrt(9);"],
      "description": "php root sqrt"
    },
    "php round number": {
      "prefix": "round",
      "body": ["round(0.60);"],
      "description": "php round number"
    },
    "php random number function": {
      "prefix": "randomfunc",
      "body": ["rand();"],
      "description": "php random number function"
    },
    "php define array": {
      "prefix": "definearray",
      "body": [
        "define(\"cars\", [",
        "  \"Alfa Romeo\",",
        "  \"BMW\",",
        "  \"Toyota\"",
        "]);"
      ],
      "description": "php define array"
    },
    "php if condition": {
      "prefix": "ifphp",
      "body": ["if(){", "    ", "}"],
      "description": "php if condition"
    },
    "php else condition": {
      "prefix": "elsephp",
      "body": ["else{", "    ", "}"],
      "description": "php else condition"
    },
    "php elseif condition": {
      "prefix": "elseifphp",
      "body": ["else if(){", "    ", "}"],
      "description": "php elseif condition"
    },
    "php switchcondition": {
      "prefix": "switchphp",
      "body": [
        "$$favcolor = \"red\";",
        "",
        "switch ($$favcolor) {",
        "  case \"red\":",
        "    echo \"Your favorite color is red!\";",
        "    break;",
        "  case \"blue\":",
        "    echo \"Your favorite color is blue!\";",
        "    break;",
        "  case \"green\":",
        "    echo \"Your favorite color is green!\";",
        "    break;",
        "  default:",
        "    echo \"Your favorite color is neither red, blue, nor green!\";",
        "}"
      ],
      "description": "php switchcondition"
    },
    "php while": {
      "prefix": "whilephp",
      "body": ["while () {", "  ", "}"],
      "description": "php while"
    },
    "php dowhile": {
      "prefix": "dowhilephp",
      "body": [
        "do {",
        "  echo \"The number is: $$x <br>\";",
        "  $$x++;",
        "} while ($$x <= 5);"
      ],
      "description": "php dowhile"
    },
    "php for loop": {
      "prefix": "forphp",
      "body": [
        "for ($$x = 0; $$x <= 10; $$x++) {",
        "  echo \"The number is: $$x <br>\";",
        "}"
      ],
      "description": "php for loop"
    },
    "sort full function": {
      "prefix": "sortfullfunction",
      "body": [
        "$$a = array(\"abdul\",\"titu\",\"babu\");",
        "sort($$a);",
        "foreach ($$a as $$v) {",
        "    ",
        "    echo $$v;",
        "    echo \"\\n\";",
        "}"
      ],
      "description": "sort full function"
    },
    "reverse sort full function": {
      "prefix": "rsortfullfunction",
      "body": [
        "$$cars = array(\"Volvo\", \"BMW\", \"Toyota\");",
        "rsort($$cars);",
        "",
        "$$clength = count($$cars);",
        "for($$x = 0; $x < $$clength; $$x++) {",
        "  echo $$cars[$$x];",
        "  echo \"<br>\";",
        "}"
      ],
      "description": "reverse sort full function"
    },
    "asort according value": {
      "prefix": "asort",
      "body": [
        "$$age = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\");",
        "asort($$age);",
        "",
        "foreach($age as $$x => $$x_value) {",
        "  echo \"Key=\" . $$x . \", Value=\" . $$x_value;",
        "  echo \"<br>\";",
        "}"
      ],
      "description": "asort according value"
    },
    "ksort according value": {
      "prefix": "ksortfull",
      "body": [
        "$$age = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\");",
        "ksort($$age);",
        "",
        "foreach($$age as $$x => $$x_value) {",
        "  echo \"Key=\" . $x . \", Value=\" . $$x_value;",
        "  echo \"<br>\";",
        "}"
      ],
      "description": "ksort according value"
    },
    "array_change_key_case() Function": {
      "prefix": "array_change_key_case_function",
      "body": ["array_change_key_case($$age,CASE_UPPER);"],
      "description": "array_change_key_case() Function"
    },
    "ternary php condition": {
      "prefix": "ternaryphp",
      "body": [
        "$$x= 3;",
        "$$result = ($$x ==3) ? \"value1\" : \"value2\";",
        "echo $$result;"
      ],
      "description": "ternary php condition"
    },
    "Null coalescing assignment operat php": {
      "prefix": "nullcoalescingPHP",
      "body": [
        "$$name = $$fullname ?? $$first ?? $$last ?? 'John';",
        "echo $$name; // 'John';"
      ],
      "description": "Null coalescing assignment operat php"
    },
    "Rest Parameter PHP": {
      "prefix": "restparameterPHP",
      "body": [
        "",
        "function sum(...$$numbers) {",
        "    $$sum = 0;",
        "    foreach ($$numbers as $$n) {",
        "        $$sum += $$n;",
        "    }",
        "    return $$sum ;",
        "}",
        "",
        "echo sum(1, 2, 3, 4, 5);",
        ""
      ],
      "description": "Rest Parameter PHP"
    },
    "string to array": {
      "prefix": "strtoarrayPHP",
      "body": [
        "$$str = \"Hello world. It's a beautiful day.\";",
        "print_r (explode(\" \",$str));"
      ],
      "description": "string to array"
    },
    "array to string": {
      "prefix": "arraytostringPHP",
      "body": [
        "$$arr = array('Hello','World!','Beautiful','Day!');",
        "echo join(\" \",$$arr);"
      ],
      "description": "array to string"
    },
    "in array -array ace kina": {
      "prefix": "inarrayPHP",
      "body": ["in_array(44,$$variable)"],
      "description": "in array -array ace kina"
    },
    "array search PHP": {
      "prefix": "arraysearchPHP",
      "body": ["array_search(33,$$var);"],
      "description": "array search PHP"
    },
    "key search PHP": {
      "prefix": "keyexistsPHP",
      "body": ["key_exists(\"x\",$$var);"],
      "description": "key search PHP"
    },
    "array walk in PHP": {
      "prefix": "arraywalkPHP",
      "body": [
        "$$number = array(1,2,3,4,5);",
        "",
        "function titu($$n){",
        "   echo $$n*$$n;",
        "   echo \"\\n\";",
        "}",
        "",
        "array_walk($$number,\"titu\");"
      ],
      "description": "array walk in PHP"
    },
  
    "array reducein PHP": {
      "prefix": "arrayreducePHP",
      "body": [
        "function myfunction($$v1,$$v2)",
        "{",
        "return $$v1+$$v2;",
        "}",
        "$$a=array(10,15,20);",
        "print_r(array_reduce($$a,\"myfunction\",5));"
      ],
      "description": "array reducein PHP"
    },
    "array list key add kore": {
      "prefix": "arraylistPHP",
      "body": [
        "$$my_array = array(\"Dog\",\"Cat\",\"Horse\");",
        "",
        "list($$a, $$b, $$c) = $$my_array;",
        "echo \"I have several animals, a $$a, a $$b and a $$c.\";"
      ],
      "description": "array list key add kore"
    },
    "array range": {
      "prefix": "arrayrangePHP",
      "body": ["$$number = range(0,50,10);", "print_r ($$number);"],
      "description": "array range"
    },
    "array push": {
      "prefix": "arraypushPHP",
      "body": [
        "$$a=array(\"red\",\"green\");",
        "array_push($$a,\"blue\",\"yellow\");",
        "print_r($$a);"
      ],
      "description": "array push"
    },
    "array shift": {
      "prefix": "arrayshifthPHP",
      "body": [
        "$$a=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");",
        "echo array_shift($$a).\"<br>\";",
        "print_r ($$a);;"
      ],
      "description": "array shift"
    },
    "array slice": {
      "prefix": "arrayslicehPHP",
      "body": [
        "$$a=array(\"red\",\"green\",\"blue\",\"yellow\",\"brown\");",
        "print_r(array_slice($$a,2));"
      ],
      "description": "array slice"
    },
    "array unshift": {
      "prefix": "arrayunshiftPHP",
      "body": [
        "$$a=array(\"a\"=>\"red\",\"b\"=>\"green\");",
        "array_unshift($$a,\"blue\");",
        "print_r($$a);"
      ],
      "description": "array unshift"
    },
    "array splice": {
      "prefix": "arraysplicePHP",
      "body": [
        "$$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\");",
        "$$a2=array(\"a\"=>\"purple\",\"b\"=>\"orange\");",
        "array_splice($$a1,0,2,$$a2);",
        "print_r($$a1);"
      ],
      "description": "array splice"
    },
    "array walk": {
      "prefix": "arraywalkPHP",
      "body": [
        "function myfunction($$value,$$key)",
        "{",
        "echo \"The key $$key has the value $$value<br>\";",
        "}",
        "$$a=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");",
        "array_walk($$a,\"myfunction\");"
      ],
      "description": "array walk"
    },
    "array map": {
      "prefix": "arraymapPHP",
      "body": [
        "function myfunction($$v)",
        "{",
        "  return($$v*$$v);",
        "}",
        "",
        "$$a=array(1,2,3,4,5);",
        "print_r(array_map(\"myfunction\",$a));"
      ],
      "description": "array map"
    },
    "array filter": {
      "prefix": "arrayfilterPHP",
      "body": [
        "function test_odd($$var)",
        "  {",
        "  return($$var & 1);",
        "  }",
        "",
        "$$a1=array(1,3,2,3,4);",
        "print_r(array_filter($$a1,\"test_odd\"));"
      ],
      "description": "array filter"
    },
    "array intersect mill": {
      "prefix": "arrayintersectPHP",
      "body": [
        "$$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\");",
        "$$a2=array(\"e\"=>\"red\",\"f\"=>\"green\",\"g\"=>\"blue\");",
        "",
        "$$result=array_intersect($$a1,$$a2);",
        "print_r($$result);"
      ],
      "description": "array intersect mill"
    },
    "array diff omill": {
      "prefix": "arraydifftPHP",
      "body": [
        "$$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\");",
        "$$a2=array(\"e\"=>\"red\",\"f\"=>\"green\",\"g\"=>\"blue\");",
        "",
        "$$result=array_diff($$a1,$$a2);",
        "print_r($$result);"
      ],
      "description": "array diff omill"
    },
    "array pop last element delete": {
      "prefix": "arraypopPHP",
      "body": [
        "$$a=array(\"red\",\"green\",\"blue\");",
        "array_pop($$a);",
        "print_r($$a);"
      ],
      "description": "array pop last element delete"
    },
    "array range number": {
      "prefix": "arrayrangePHP",
      "body": ["$$number = range(0,5);", "print_r ($$number);"],
      "description": "array range number"
    },
    "array random": {
      "prefix": "arrayrandomPHP",
      "body": [
        "$$a=array(\"red\",\"green\",\"blue\",\"yellow\",\"brown\");",
        "$$random_keys=array_rand($$a,3);",
        "echo $$a[$random_keys[0]].\"<br>\";",
        "echo $$a[$random_keys[1]].\"<br>\";",
        "echo $$a[$random_keys[2]];"
      ],
      "description": "array random"
    },
    "array shuffle": {
      "prefix": "arrayshufflePHP",
      "body": [
        "$$my_array = array(\"red\",\"green\",\"blue\",\"yellow\",\"purple\");",
        "",
        "shuffle($$my_array);",
        "print_r($$my_array);"
      ],
      "description": "array shuffle"
    },
    "array sort multi": {
      "prefix": "arraysortPHP",
      "body": [
        "$$a=array(\"Dog\",\"Cat\",\"Horse\",\"Bear\",\"Zebra\");",
        "array_multisort($$a);",
        "print_r($$a);"
      ],
      "description": "array sort multi"
    },
    "array sum jog": {
      "prefix": "arraysumPHP",
      "body": ["$$a=array(5,15,25);", "echo array_sum($$a);"],
      "description": "array sum jog"
    },
    "array compact": {
      "prefix": "arraycompactPHP",
      "body": [
        "$$firstname = \"Peter\";",
        "$$lastname = \"Griffin\";",
        "$$age = \"41\";",
        "",
        "$$result = compact(\"firstname\", \"lastname\", \"age\");",
        "",
        "print_r($$result);"
      ],
      "description": "array compact"
    },
    "array currenr first array": {
      "prefix": "arraycurrentPHP",
      "body": [
        "$$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");",
        "",
        "echo current($$people) . \"<br>\";"
      ],
      "description": "array currenr first array"
    },
    "string cut like slice": {
      "prefix": "strsubstrPHP",
      "body": ["substr($$var,2,6);"],
      "description": "string cut like slice"
    },
    "string explode tukra tukra": {
      "prefix": "strexplode",
      "body": [
        "$$str = 'one,two,three,four';",
        "",
        "// zero limit",
        "print_r(explode(',',$$str,0));",
        "print \"<br>\";",
        "",
        "// positive limit",
        "print_r(explode(',',$$str,2));",
        "print \"<br>\";",
        "",
        "// negative limit ",
        "print_r(explode(',',$$str,-1));"
      ],
      "description": "string explode tukra tukra"
    },
    "string join": {
      "prefix": "strjoin",
      "body": [
        "$$arr = array('Hello','World!','Beautiful','Day!');",
        "echo join(\" \",$$arr);"
      ],
      "description": "string join"
    },
    "string implode": {
      "prefix": "strimplode",
      "body": [
        "$$arr = array('Hello','World!','Beautiful','Day!');",
        "echo implode(\" \",$$arr);"
      ],
      "description": "string implode"
    },
    "string split": {
      "prefix": "strsplit",
      "body": ["print_r(str_split(\"Hello\"));"],
      "description": "string split"
    },
    "string word count": {
      "prefix": "strwordcount",
      "body": ["echo str_word_count(\"Hello world!\");"],
      "description": "string word count"
    },
    "string token": {
      "prefix": "strtok",
      "body": [
        "$$string = \"Hello world. Beautiful day today.\";",
        "$$token = strtok($$string, \" \");",
        "",
        "while ($token !== false)",
        "{",
        "echo \"$$token<br>\";",
        "$$token = strtok(\" \");",
        "}"
      ],
      "description": "string token"
    },
    "string position check": {
      "prefix": "strpos",
      "body": ["echo strrpos(\"I love php, I love php too!\",\"php\");"],
      "description": "string position check"
    },
    "header function PHP": {
      "prefix": "headerPHP",
      "body": ["header(\"location: https:www.google.com\");"],
      "description": "header function PHP"
    },
    "move_uploaded_file": {
      "prefix": "moveuploadedfilePHP",
      "body": ["move_uploaded_file(tmpfilename, destination);"],
      "description": "move_uploaded_file"
    },
    "set cookies": {
      "prefix": "setcookiesPHP",
      "body": [
        "setcookie($$cookie_name, $$cookie_value, time() + (86400 * 30), \"/\");"
      ],
      "description": "set cookies"
    },
    "acf if": {
      "prefix": "acfif",
      "body": [
        "<?php if( get_field('field_name') ): ?>",
        "	<p>My field value: <?php the_field('field_name'); ?></p>",
        "<?php endif; ?>"
      ],
      "description": "acf if"
    },
  
    "acf foreach": {
      "prefix": "acfforeach",
      "body": [
        "<?php ",
        "   $$ff = get_field('contact_us_content','option');",
        "   foreach ($$ff as $$fff) {",
        "         ?>",
        "         <li><i class=\"fa <?php echo $$fff['icon'];?>\"></i><?php echo $$fff['info'];?></li>",
        "         <?php",
        "   }",
        "   ",
        "?>"
      ],
      "description": "acf foreach"
    },
    "iteration-foreach": {
      "prefix": "iteration-foreach",
      "body": ["array.forEach(function(){", "", "});"],
      "description": "iteration-foreach"
    },
  
    "terneryjs": {
      "prefix": "terneryjs",
      "body": ["let result = (marks >= 40) ? 'pass' : 'fail';"],
      "description": "terneryjs"
    },
    "switchjs": {
      "prefix": "switchjs",
      "body": [
        "let x = \"0\";",
        "",
        "switch (x) {",
        "  case 0:",
        "    text = \"Off\";",
        "    break;",
        "  case 1:",
        "    text = \"On\";",
        "    break;",
        "  default:",
        "    text = \"No value found\";",
        "}",
        "document.write = text;"
      ],
      "description": "switchjs"
    },
    "breakifjs": {
      "prefix": "breakifjs",
      "body": [
        "let text = \"\";",
        "for (let i = 0; i < 10; i++) {",
        "  if (i === 3) { break; }",
        "  text += \"The number is \" + i + \"<br>\";",
        "}",
        "",
        "document.getElementById(\"demo\").innerHTML = text;"
      ],
      "description": "breakifjs"
    },
    "arrowjs": {
      "prefix": "arrowjs",
      "body": [
        "var hello;",
        "",
        "hello = () => {",
        "  return \"Hello World!\";",
        "}",
        ""
      ],
      "description": "arrowjs"
    },
    "setjs": {
      "prefix": "setjs",
      "body": [
        "// Create a Set",
        "const letters = new Set([\"a\",\"b\",\"c\"]);",
        "",
        "// List all Elements",
        "let text = \"\";",
        "letters.forEach (function(value) {",
        "  text += value + \"<br>\";",
        "})",
        "",
        "document.getElementById(\"demo\").innerHTML = text;"
      ],
      "description": "setjs"
    },
    "mapjs": {
      "prefix": "mapjs",
      "body": [
        "// Create a Map",
        "const fruits = new Map([",
        "  [\"apples\", 500],",
        "  [\"bananas\", 300],",
        "  [\"oranges\", 200]",
        "]);",
        "",
        "document.getElementById(\"demo\").innerHTML = fruits.get(\"apples\");"
      ],
      "description": "mapjs"
    },
  
    "ee": {
      "prefix": "ee",
      "body": ["esc_html( )"],
      "description": "ee"
    },
  
    "emptyphp": {
      "prefix": "emptyphp",
      "body": [
        "<?php if( !empty( $$settings[''] ) ) :   ?>",
        "                ",
        "<?php endif ?>"
      ],
      "description": "emptyphp"
    },
    "translate": {
      "prefix": "translate",
      "body": ["<?php echo esc_html__( '','plugin-name' )?>"],
      "description": "translate"
    },
    "comment": {
      "prefix": "comment",
      "body": ["/**", "* ", "*/  "],
      "description": "comment"
    },
    "elseifdirectphp": {
      "prefix": "elseifdirectphp",
      "body": ["<?php elseif( get_field('otherfield', 10681) ): ?>"],
      "description": "elseifdirectphp"
    },
    "elsedirectphp": {
      "prefix": "elsedirectphp",
      "body": ["<?php else: ?>"],
      "description": "elsedirectphp"
    },
    "foreachdirect": {
      "prefix": "foreachdirect",
      "body": [
        "<?php foreach ($$settings[''] as $$item): ?>",
        "    ",
        "<?php endforeach; ?>"
      ],
      "description": "foreachdirect"
    },
    "foreachsimple": {
      "prefix": "foreachsimple",
      "body": ["<?php ", "    foreach($items as $item){", "", "    }", "?>"],
      "description": "foreachsimple"
    },
    "labelblock": {
      "prefix": "labelblock",
      "body": ["'label_block' => true,"],
      "description": "labelblock"
    },
  
  "estylecontent": {
    "prefix": "estylecontent",
    "body": [
      "$$this->start_controls_section(",
      "    'style',",
      "    [",
      "        'label' => esc_html__('', 'plugin-name'),",
      "        'tab'   => Controls_Manager::TAB_STYLE,",
      "    ]",
      ");",
      "",
      "",
      "",
      "",
      "",
      "$$this->end_controls_section();"
    ],
    "description": "estylecontent"
  },
  
  "econtentstart": {
    "prefix": "estartcontent",
    "body": [
      "$$this->start_controls_section(",
      "    'content',",
      "    [",
      "        'label' => esc_html__('', 'plugin-name')",
      "    ]",
      ");",
      "",
      "",
      "$$this->end_controls_section();  "
    ],
    "description": "econtentstart"
  },
  "elementor title": {
    "prefix": "etext",
    "body": [
      "$$this->add_control(",
      "    'title',",
      "    [",
      "        'label' => esc_html__( 'Title', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::TEXT,",
      "        'default' => esc_html__( 'Default title', 'plugin-name' ),",
      "        'label_block' => true,",
      "    ]",
      ");"
    ],
    "description": "elementor title"
  }
  "enumbercontrol": {
    "prefix": "enumber",
    "body": [
      "// Number Control",
      "$$this->add_control(",
      "    'price',",
      "    [",
      "        'label' => esc_html__( 'Price', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::NUMBER,",
      "        'min' => 5,",
      "        'max' => 100,",
      "        'step' => 5,",
      "        'default' => 10,",
      "    ]",
      ");"
    ],
    "description": "enumbercontrol"
  },
  
  "etextareacontrol": {
    "prefix": "etextarea",
    "body": [
      "$$this->add_control(",
      "    'description',",
      "    [",
      "        'label' => esc_html__( 'Description', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::TEXTAREA,",
      "        'rows' => 10,",
      "        'default' => esc_html__( 'Default description', 'plugin-name' ),",
      "    ]",
      ");"
    ],
    "description": "etextareacontrol"
  },
  
  "ewisicontrol": {
    "prefix": "ewisi",
    "body": [
      "$$this->add_control(",
      "    'item_description',",
      "    [",
      "        'label' => esc_html__( 'Description', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::WYSIWYG,",
      "        'default' => esc_html__( 'Default description', 'plugin-name' ),",
      "    ]",
      ");"
    ],
    "description": "ewisicontrol"
  },
  
  
  "eselectcontrol": {
    "prefix": "eselect",
    "body": [
      "// Select Option",
      "$$this->add_control(",
      "    'golflab_image_with_video_style_design',",
      "    [",
      "        'label'     => esc_html__( 'Style', 'plugin-name' ),",
      "        'type'      => \\Elementor\\Controls_Manager::SELECT,",
      "        'default'   => 'style_one',",
      "        'options'   => [",
      "            'style_one'      => esc_html__( 'Style One', 'plugin-name' ),",
      "            'style_two'      => esc_html__( 'Style Two', 'plugin-name' ),",
      "        ],",
      "    ]",
      ");"
    ],
    "description": "eselectcontrol"
  },
  
  
  "ecolor": {
    "prefix": "ecolor",
    "body": [
      
      "$$this->add_control(",
      "    'spinner_color',",
      "    [",
      "        'label' => esc_html__( 'Color', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::COLOR,",
      "        'selectors' => [",
      "            '{{WRAPPER}} .title' => 'color: {{VALUE}} !important',",
      "        ],",
      "    ]",
      ");"
    ],
    "description": "ecolor"
  },
  
  
  "efontfamily": {
    "prefix": "efontfamily",
    "body": [
      "//font-famly Control",
      "$$this->add_control(",
      "    'font_family',",
      "    [",
      "        'label' => esc_html__( 'Font Family', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::FONT,",
      "        'default' => \"'Open Sans', sans-serif\",",
      "        'selectors' => [",
      "            '{{WRAPPER}} .title' => 'font-family: {{VALUE}}',",
      "        ],",
      "    ]",
      ");",
      ""
    ],
    "description": "efontfamily"
  },
  
  "edate": {
    "prefix": "etime",
    "body": [
      "// Date Control",
      "$$this->add_control(",
      "    'due_date',",
      "    [",
      "        'label' => esc_html__( 'Due Date', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::DATE_TIME,",
      "    ]",
      ");",
      ""
    ],
    "description": "edate"
  },
  
  
  "erepeater": {
    "prefix": "erepeater",
    "body": [
      "// Repeater",
      "$$repeater = new \\Elementor\\Repeater();",
      "",
      "$$repeater->add_control(",
      "    'list_title', [",
      "        'label' => esc_html__( 'Title', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::TEXT,",
      "        'default' => esc_html__( 'List Title' , 'plugin-name' ),",
      "        'label_block' => true,",
      "    ]",
      ");",
      "",
      "$$repeater->add_control(",
      "    'list_content', [",
      "        'label' => esc_html__( 'Content', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::WYSIWYG,",
      "        'default' => esc_html__( 'List Content' , 'plugin-name' ),",
      "        'show_label' => false,",
      "    ]",
      ");",
      "",
      "$$this->add_control(",
      "    'list_repeater',",
      "    [",
      "        'label' => esc_html__( 'Repeater List', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::REPEATER,",
      "        'fields' => $$repeater->get_controls(),",
      "        'default' => [",
      "            [",
      "                'list_title' => esc_html__( 'Title #1', 'plugin-name' ),",
      "                'list_content' => esc_html__( 'Item content. Click the edit button to change this text.', 'plugin-name' ),",
      "            ],",
      "            [",
      "                'list_title' => esc_html__( 'Title #2', 'plugin-name' ),",
      "                'list_content' => esc_html__( 'Item content. Click the edit button to change this text.', 'plugin-name' ),",
      "            ],",
      "        ],",
      "        'title_field' => '{{{ list_title }}}',",
      "    ]",
      ");",
      ""
    ],
    "description": "erepeater"
  },
  
  
  
  "etabs": {
    "prefix": "etabs",
    "body": [
      "// Tabs",
      "$$this->start_controls_tabs(",
      "    'style_tabs'",
      ");",
      "",
      "$$this->start_controls_tab(",
      "    'style_normal_tab',",
      "    [",
      "        'label' => esc_html__( 'Normal', 'plugin-name' ),",
      "    ]",
      ");",
      "",
      "$$this->add_control();",
      "",
      "",
      "$$this->end_controls_tab();",
      "// Hover start",
      "$$this->start_controls_tab(",
      "    'style_hover_tab',",
      "    [",
      "        'label' => esc_html__( 'Hover', 'plugin-name' ),",
      "    ]",
      ");",
      "",
      "$$this->add_control();",
      "",
      "",
      "$$this->end_controls_tab();",
      "",
      "$$this->end_controls_tabs();",
      ""
    ],
    "description": "etabs"
  },
  
  "eslider": {
    "prefix": "eslider",
    "body": [
      "// Icon Size",
      "$$this->add_responsive_control(",
      "	'Facilitiese_icon_custom_dimensionsss',",
      "	[",
      "		'label' => esc_html__( 'Size', 'plugin-name' ),",
      "		'type' => \\Elementor\\Controls_Manager::SLIDER,",
      "		'size_units' => [ 'px', '%' ],",
      "		'range' => [",
      "			'px' => [",
      "				'min' => 1,",
      "				'max' => 100,",
      "				'step' => 1,",
      "			],",
      "			'%' => [",
      "				'min' => 1,",
      "				'max' => 100,",
      "			],",
      "		],",
      "		'selectors' => [",
      "			'{{WRAPPER}} .member-facility .icon svg' => 'width: {{SIZE}}{{UNIT}};',",
      "		],",
      "	]",
      ");"
    ],
    "description": "eslider"
  },
  
  
  "emargin": {
    "prefix": "emargin",
    "body": [
      "$$this->add_responsive_control(",
      "    'spinner_margin',",
      "    [",
      "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
      "        'size_units' => [ 'px', '%', 'em' ],",
      "        'selectors' => [",
      "            '{{WRAPPER}} .title' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',",
      "        ],",
      "    ]",
      ");"
    ],
    "description": "emargin"
  },
  
  
  "epadding": {
    "prefix": "epadding",
    "body": [
      "$$this->add_responsive_control(",
      "    'spinner_padding',",
      "    [",
      "        'label'      => __('Padding', 'plugin-name'),",
      "        'type'       => Controls_Manager::DIMENSIONS,",
      "        'size_units' => ['px', '%'],",
      "        'selectors'  => [",
      "            '{{WRAPPER}} .title' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};'",
      "        ]",
      "    ]",
      ");"
    ],
    "description": "epadding"
  },
  
  "elink": {
    "prefix": "elink",
    "body": [
      "$$this->add_control(",
      "    'website_link',",
      "    [",
      "        'label' => esc_html__( 'Link', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::URL,",
      "        'placeholder' => esc_html__( 'https://your-link.com', 'plugin-name' ),",
      "        'default' => [",
      "            'url' => '#',",
      "            'is_external' => true,",
      "            'nofollow' => true,",
      "            'custom_attributes' => '',",
      "        ],",
      "        'label_block' => true,",
      "    ]",
      ");"
    ],
    "description": "elink"
  },
  
  
  "eimage": {
    "prefix": "eimage",
    "body": [
      "$$this->add_control(",
      "    'image',",
      "    [",
      "        'label' => esc_html__( 'Choose Image', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::MEDIA,",
      "        'default' => [",
      "            'url' => \\Elementor\\Utils::get_placeholder_image_src(),",
      "        ],",
      "    ]",
      ");"
    ],
    "description": "eimage"
  },
  
  "eicon&image": {
    "prefix": "eicon%image",
    "body": [
      "$$this->add_control(",
      "    'spinner_icon',",
      "    [",
      "        'label' => esc_html__( 'Icon', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::ICONS,",
      "        'default' => [",
      "            'value' => 'fas fa-star',",
      "            'library' => 'solid',",
      "        ],",
      "    ]",
      ");"
    ],
    "description": "eicon&image"
  },
  
  
  
  "eboxshadow": {
    "prefix": "eboxshadow",
    "body": [
      "$$this->add_group_control(",
      "    \\Elementor\\Group_Control_Box_Shadow::get_type(),",
      "    [",
      "        'name' => 'box_shadow',",
      "        'selector' => '{{WRAPPER}} .your-class',",
      "    ]",
      ");"
    ],
    "description": "eboxshadow"
  },
  
  "etypography": {
    "prefix": "etypography",
    "body": [
     
      "",
      "$$this->add_group_control(",
      "    \\Elementor\\Group_Control_Typography::get_type(),",
      "    [",
      "        'name' => 'spinner_typography',",
      "        'selector' => '{{WRAPPER}} .title',",
      "    ]",
      ");"
    ],
    "description": "etypography"
  },
  
  "eborder": {
    "prefix": "eborder",
    "body": [
      "$$this->add_control(",
      "    'spinner_color',",
      "    [",
      "        'label' => esc_html__( 'Card Border Color', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::COLOR,",
      "        'selectors' => [",
      "            '{{WRAPPER}} .title' => 'border:1px solid {{VALUE}} !important',",
      "        ],",
      "    ]",
      ");"
    ],
    "description": "eborder"
  },
  
  "eopacity": {
    "prefix": "eopacity",
    "body": [
      "$$this->add_control(",
      "    'border_color_timeline_opacity',",
      "    [",
      "        'label' => esc_html__( 'Border Color Opacity', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::SLIDER,",
      "        'range' => [",
      "            'min' => 0,",
      "            'max' => 1.00,",
      "        ],",
      "        'selectors' => [",
      "            '{{WRAPPER}} .hisoty-inner:before' => 'opacity: {{SIZE}}',",
      "        ],",
      "    ]",
      ");"
    ],
    "description": "eopacity"
  },
  
  
  "ebackground": {
    "prefix": "ebackground",
    "body": [
      "$$this->add_group_control(",
      "    \\Elementor\\Group_Control_Background::get_type(),",
      "    [",
      "        'name' => 'background',",
      "        'label' => esc_html__( 'Background', 'plugin-name' ),",
      "        'types' => [ 'classic', 'gradient', 'video' ],",
      "        'selector' => '{{WRAPPER}} .title',",
      "    ]",
      ");"
    ],
    "description": "ebackground"
  },
  
  
  "condition": {
    "prefix": "econdition",
    "body": [
      "'condition' => [",
      "    'style' => 'style_two'",
      "]"
    ],
    "description": "condition"
  },
  
  
  "pluginhead description": {
    "prefix": "phead",
    "body": [
      "/**",
      " * Plugin Name:       My Basics Plugin",
      " * Plugin URI:        https://example.com/plugins/the-basics/",
      " * Description:       Handle the basics with this plugin.",
      " * Version:           1.10.3",
      " * Requires at least: 5.2",
      " * Requires PHP:      7.2",
      " * Author:            John Smith",
      " * Author URI:        https://author.example.com/",
      " * License:           GPL v2 or later",
      " * License URI:       https://www.gnu.org/licenses/gpl-2.0.html",
      " * Update URI:        https://example.com/my-plugin/",
      " * Text Domain:       my-basics-plugin",
      " * Domain Path:       /languages",
      " */"
    ],
    "description": "pluginhead description"
  },
  
  "plugin active deactive": {
    "prefix": "pactivedeactive",
    "body": [
      "function wordcount_activation_hook(){",
      "",
      "}",
      "register_activation_hook( __FILE__, \"wordcount_activation_hook\" );",
      "",
      "",
      "",
      "function wordcount_deactivation_hook(){",
      "    ",
      "}",
      " register_deactivation_hook( __FILE__, \"wordcount_activation_hook\" );"
    ],
    "description": "plugin active deactive"
  },
  
  "ethree": {
    "prefix": "ethree",
    "body": [
      "$$this->add_group_control(",
      "    Group_Control_Typography::get_type(),",
      "    [",
      "        'label'    => esc_html__('Typography', 'plugin-name'),",
      "        'name'     => 'spinner_typ',",
      "        'selector' => '{{WRAPPER}} .title span',",
      "",
      "    ]",
      ");",
      "",
      "$$this->add_control(",
      "    'spinner_color',",
      "    [",
      "        'label'     => esc_html__('Color', 'plugin-name'),",
      "        'type'      => Controls_Manager::COLOR,",
      "        'selectors' => [",
      "            '{{WRAPPER}} .title span' => 'color: {{VALUE}} !important;',",
      "        ],",
      "    ]",
      ");",
      "$$this->add_responsive_control(",
      "    'spinner_margin',",
      "    [",
      "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
      "        'size_units' => [ 'px', '%', 'em' ],",
      "        'selectors' => [",
      "            '{{WRAPPER}} .title span' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
      "        ],",
      "    ]",
      ");"
    ],
    "description": "ethree"
  },
  
  "esvgicontogether": {
    "prefix": "esvgicontogetherstyle",
    "body": [
      "$$this->add_control(",
      "    'spinner_services_style_icon_color',",
      "    [",
      "        'label' => esc_html__( 'SVG Color', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::COLOR,",
      "        'selectors' => [",
      "            '{{WRAPPER}} .service-icon svg path' => 'fill: {{VALUE}}',",
      "        ],",
      "    ]",
      ");",
      "",
      "$$this->add_responsive_control(",
      "    'spinner_services_style_svg_size',",
      "    [",
      "        'label' => esc_html__( 'SVG Size', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::SLIDER,",
      "        'size_units' => [ 'px' ],",
      "        'range' => [",
      "            'px' => [",
      "                'min' => 10,",
      "                'max' => 100,",
      "                'step' => 1,",
      "            ],",
      "        ],",
      "        'default' => [",
      "            'unit' => 'px',",
      "            ",
      "        ],",
      "        'selectors' => [",
      "            '{{WRAPPER}} .service-icon svg' => 'width: {{SIZE}}{{UNIT}};height: {{SIZE}}{{UNIT}};',",
      "        ],",
      "    ]",
      ");",
      "",
      "",
      "$$this->add_control(",
      "    'spinner_services_style_icon_colorr',",
      "    [",
      "        'label' => esc_html__( 'Icon Color', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::COLOR,",
      "        'selectors' => [",
      "            '{{WRAPPER}} .service21-icon i' => 'color: {{VALUE}}',",
      "        ],",
      "    ]",
      ");",
      "",
      "$$this->add_responsive_control(",
      "    'spinner_services_style_icon_size',",
      "    [",
      "        'label' => esc_html__( 'Icon Size', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::SLIDER,",
      "        'size_units' => [ 'px' ],",
      "        'range' => [",
      "            'px' => [",
      "                'min' => 10,",
      "                'max' => 100,",
      "                'step' => 1,",
      "            ],",
      "        ],",
      "        'default' => [",
      "            'unit' => 'px',",
      "            ",
      "        ],",
      "        'selectors' => [",
      "            '{{WRAPPER}} .service-icon i' => 'font-size: {{SIZE}}{{UNIT}}',",
      "        ],",
      "    ]",
      ");"
    ],
    "description": "esvgicontogether"
  },
  
  
  "eattr": {
    "prefix": "eattr",
    "body": [
      "<?php echo esc_attr__('service_image','plugin-name')?>"
    ],
    "description": "eattr"
  },
  
  "ehr": {
    "prefix": "ehr",
    "body": [
      "$$this->add_control(",
      "    'hr',",
      "    [",
      "        'type' => \\Elementor\\Controls_Manager::DIVIDER,",
      "    ]",
      ");"
    ],
    "description": "ehr"
  },
  
  "eheading": {
    "prefix": "eheading",
    "body": [
      "$$this->add_control(",
      "    'more_options',",
      "    [",
      "        'label' => esc_html__( 'Additional Options', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::HEADING,",
      "        'separator' => 'before',",
      "    ]",
      ");"
    ],
    "description": "eheading"
  },
  
  "ealignment": {
    "prefix": "ealignment",
    "body": [
      "$$this->add_responsive_control(",
      "    'spinner_content_align',",
      "    [",
      "        'label' 		=> esc_html__( 'Alignment', 'plugin-name' ),",
      "        'type' 			=> \\Elementor\\Controls_Manager::CHOOSE,",
      "        'options' 		=> [",
      "            'left' 		=> [",
      "                'title' => esc_html__( 'Left', 'plugin-name' ),",
      "                'icon' 	=> 'eicon-text-align-left',",
      "            ],",
      "            'center' 	=> [",
      "                'title' => esc_html__( 'Center', 'plugin-name' ),",
      "                'icon' 	=> 'eicon-text-align-center',",
      "            ],",
      "            'right' 	=> [",
      "                'title' => esc_html__( 'Right', 'plugin-name' ),",
      "                'icon' 	=> 'eicon-text-align-right',",
      "            ],",
      "            'justify' 	=> [",
      "                'title' => esc_html__( 'Justified', 'plugin-name' ),",
      "                'icon' 	=> 'eicon-text-align-justify',",
      "            ],",
      "        ],",
      "        'default' 		=> 'center',",
      "        'selectors' 	=> [",
      "            '{{WRAPPER}} .title ' => 'text-align: {{VALUE}};',",
      "            '{{WRAPPER}} .section-title1 p' => 'text-align: {{VALUE}};',  ",
      "            ",
      "",
      "                ",
      "        ],",
      "    ]",
      ");"
    ],
    "description": "ealignment"
  },
  
  "ebradius": {
    "prefix": "ebradius",
    "body": [
      "$$this->add_responsive_control(",
      "    'spinner_border_radius',",
      "    [",
      "        'label'      => __('Border Radius', 'plugin-name'),",
      "        'type'       => Controls_Manager::DIMENSIONS,",
      "        'size_units' => ['px', '%'],",
      "        'selectors'  => [",
      "            '{{WRAPPER}} .title' => 'border-radius: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};'",
      "        ]",
      "    ]",
      ");"
    ],
    "description": "ebradius"
  },
  
  
  "econditions": {
    "prefix": "econditions",
    "body": [
      "'condition' => [",
      "    'corelaw_intro_style' => ['style_one','style_two',],",
      "],"
    ],
    "description": "econditions"
  },
  
  "ecsstext": {
    "prefix": "ecsstext",
    "body": [
      "$$this->add_responsive_control(",
      "    'eael_accordion_height',",
      "    [",
      "        'label'       => esc_html__( 'Height', 'plugin-name' ),",
      "        'type'        => Controls_Manager::TEXT,",
      "        'default'     => '400',",
      "        'description' => 'Unit in px',",
      "        'selectors'   => [",
      "            '{{WRAPPER}} .eael-img-accordion ' => 'height: {{VALUE}}px;',",
      "        ],",
      "    ]",
      ");",
      ""
    ],
    "description": "ecsstext"
  },
  
  "efour": {
    "prefix": "efour",
    "body": [
      "$$this->add_group_control(",
      "    Group_Control_Typography::get_type(),",
      "    [",
      "        'label'    => esc_html__('Typography', 'plugin-name'),",
      "        'name'     => 'spinner_typ',",
      "        'selector' => '{{WRAPPER}} .title',",
      "",
      "    ]",
      ");",
      "",
      "$$this->add_control(",
      "    'spinner_color',",
      "    [",
      "        'label'     => esc_html__('Color', 'plugin-name'),",
      "        'type'      => Controls_Manager::COLOR,",
      "        'selectors' => [",
      "            '{{WRAPPER}} .title' => 'color: {{VALUE}} !important;',",
      "        ],",
      "    ]",
      ");",
      "$$this->add_responsive_control(",
      "    'spinner_margin',",
      "    [",
      "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
      "        'size_units' => [ 'px', '%', 'em' ],",
      "        'selectors' => [",
      "            '{{WRAPPER}} .title' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
      "        ],",
      "    ]",
      ");",
      "",
      "$$this->add_responsive_control(",
      "    'spinner_padding',",
      "    [",
      "        'label'      => __('Padding', 'plugin-name'),",
      "        'type'       => Controls_Manager::DIMENSIONS,",
      "        'size_units' => ['px', '%'],",
      "        'selectors'  => [",
      "            '{{WRAPPER}} .title' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;'",
      "        ]",
      "    ]",
      ");"
    ],
    "description": "efour"
  },
  
  "esettings": {
    "prefix": "esettings",
    "body": [
      "<?php echo esc_html($$settings[''] )?>"
    ],
    "description": "esettings"
  },
  
  "eswitch": {
    "prefix": "eswitch",
    "body": [
      "$$this->add_control(",
      "    'spinner_show',",
      "    [",
      "        'label' => esc_html__( 'Show Navigation', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::SWITCHER,",
      "        'label_on' => esc_html__( 'Show', 'plugin-name' ),",
      "        'label_off' => esc_html__( 'Hide', 'plugin-name' ),",
      "        'return_value' => 'yes',",
      "        'default' => 'yes',",
      "    ]",
      ");"
    ],
    "description": "eswitch"
  },
  
  
  "wpkses": {
    "prefix": "wpkses",
    "body": [
      "<?php echo wp_kses($$settings['title'], wp_kses_allowed_html('post'))  ?>"
    ],
    "description": "wpkses"
  },
  
  "isset": {
    "prefix": "isset",
    "body": [
      "<?php if ((isset(Egns_Helpers::egns_get_theme_option('header_one_menu_button'))   ==  1) && class_exists('CSF')) :  ?>"
    ],
    "description": "isset"
  },
  
  "ebordergroup": {
    "prefix": "ebordergroup",
    "body": [
      "$$this->add_group_control(",
      "    \\Elementor\\Group_Control_Border::get_type(),",
      "    [",
      "        'name' => 'avalle_banner_button_style_three_border',",
      "        'label' => esc_html__('Border', 'avalle-core'),",
      "        'selector' => '{{WRAPPER}} .btn--primary-outline2',",
      "    ]",
      ");",
      "  "
    ],
    "description": "ebordergroup"
  },
  
  "eeschtml": {
    "prefix": "eeschtml",
    "body": [
      "<?php echo esc_html($$settings[''])?>"
    ],
    "description": "eeschtml"
  },
  
  
  
  "eicondirect": {
    "prefix": "eicondirect",
    "body": [
      "<?php \\Elementor\\Icons_Manager::render_icon( $$settings['icon'], [ 'aria-hidden' => 'true' ] ); ?>"
    ],
    "description": "eicondirect"
  },
  
  
  
  "eimagethree": {
    "prefix": "eimagethree",
    "body": [
      "$$this->add_responsive_control(",
      "    'imagestyle_height',",
      "    [",
      "        'label'       => esc_html__('Height', 'plugin-name'),",
      "        'type'        => Controls_Manager::SLIDER,",
      "        'size_units'  => ['px', '%'],  // Allow px and percentage units",
      "        'description' => esc_html__('Choose height in px or %', 'plugin-name'),",
      "        'selectors'   => [",
      "            '{{WRAPPER}} .ft-image' => 'height: {{SIZE}}{{UNIT}};', // Dynamic unit",
      "        ],",
      "        'default'     => [",
      "            'unit'  => 'px',  // Default unit is px",
      "          ",
      "        ],",
      "    ]",
      ");",
      "",
      "$$this->add_responsive_control(",
      "    'imagestyle_width',",
      "    [",
      "        'label'       => esc_html__('Width', 'plugin-name'),",
      "        'type'        => Controls_Manager::SLIDER,",
      "        'size_units'  => ['px', '%'],  // Allow px and percentage units",
      "        'description' => esc_html__('Choose width in px or %', 'plugin-name'),",
      "        'selectors'   => [",
      "            '{{WRAPPER}} .ft-image' => 'width: {{SIZE}}{{UNIT}};', // Dynamic unit",
      "        ],",
      "        'default'     => [",
      "            'unit'  => 'px',  // Default unit is px",
      "           ",
      "        ],",
      "    ]",
      ");",
      "",
      "$$this->add_responsive_control(",
      "    'imagestyle_border_radius',",
      "    [",
      "        'label'      => __('Border Radius', 'plugin-name'),",
      "        'type'       => Controls_Manager::DIMENSIONS,",
      "        'size_units' => ['px', '%'],",
      "        'selectors'  => [",
      "            '{{WRAPPER}} .ft-image' => 'border-radius: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};'",
      "        ]",
      "    ]",
      ");"
    ],
    "description": "eimagethree"
  },
  
  
  "enav": {
    "prefix": "enav",
    "body": [
      "$$this->add_control(",
      "    'scooby_team_content_two_style_navigation_color',",
      "    [",
      "        'label' => esc_html__('Color', 'scooby-core'),",
      "        'type' => \\Elementor\\Controls_Manager::COLOR,",
      "        'selectors' => [",
      "            '{{WRAPPER}} .arrow-style-one .swiper-prev-arrow i, .arrow-style-one .swiper-next-arrow i' => 'color: {{VALUE}};border:1px solid {{VALUE}}',",
      "        ],",
      "    ]",
      ");",
      "",
      "$$this->add_control(",
      "    'scooby_team_content_two_style_navigation_color_hover',",
      "    [",
      "        'label' => esc_html__('Hover Icon Color', 'scooby-core'),",
      "        'type' => \\Elementor\\Controls_Manager::COLOR,",
      "        'selectors' => [",
      "            '{{WRAPPER}} .arrow-style-one .swiper-prev-arrow i:hover, .arrow-style-one .swiper-next-arrow i:hover' => 'color: {{VALUE}}',",
      "        ],",
      "    ]",
      ");",
      "",
      "$$this->add_control(",
      "    'scooby_team_content_two_style_navigation_color_bac_hover',",
      "    [",
      "        'label' => esc_html__('Hover Background Color', 'scooby-core'),",
      "        'type' => \\Elementor\\Controls_Manager::COLOR,",
      "        'selectors' => [",
      "            '{{WRAPPER}} .arrow-style-one .swiper-prev-arrow i:hover, .arrow-style-one .swiper-next-arrow i:hover' => 'background: {{VALUE}}; border:1px solid {{VALUE}}',",
      "",
      "        ],",
      "    ]",
      ");"
    ],
    "description": "enav"
  },
  "etwo": {
    "prefix": "etwo",
    "body": [
      "$$this->add_group_control(",
      "	Group_Control_Typography::get_type(),",
      "	[",
      "		'label'    => esc_html__('Typography', 'plugin-name'),",
      "		'name'     => 'spinner_typ',",
      "		'selector' => '{{WRAPPER}} .title',",
      "",
      "	]",
      ");",
      "",
      "$$this->add_control(",
      "	'spinner_color',",
      "	[",
      "		'label'     => esc_html__('Color', 'plugin-name'),",
      "		'type'      => Controls_Manager::COLOR,",
      "		'selectors' => [",
      "			'{{WRAPPER}} .title' => 'color: {{VALUE}} !important;',",
      "		],",
      "	]",
      ");"
    ],
    "description": "etwo"
  },
  
  
  
  "essubtitle": {
    "prefix": "essubtitle",
    "body": [
      "$$this->add_group_control(",
      "    Group_Control_Typography::get_type(),",
      "    [",
      "        'label'    => esc_html__('Typography', 'plugin-name'),",
      "        'name'     => 'subtitle_typ',",
      "        'selector' => '{{WRAPPER}} .subtitle',",
      "",
      "    ]",
      ");",
      "",
      "$$this->add_control(",
      "    'subtitle_color',",
      "    [",
      "        'label'     => esc_html__('Color', 'plugin-name'),",
      "        'type'      => Controls_Manager::COLOR,",
      "        'selectors' => [",
      "            '{{WRAPPER}} .subtitle' => 'color: {{VALUE}} !important;',",
      "        ],",
      "    ]",
      ");",
      "$$this->add_responsive_control(",
      "    'subtitle_margin',",
      "    [",
      "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
      "        'size_units' => [ 'px', '%', 'em' ],",
      "        'selectors' => [",
      "            '{{WRAPPER}} .subtitle' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
      "        ],",
      "    ]",
      ");",
      "",
      "$$this->add_responsive_control(",
      "    'subtitle_padding',",
      "    [",
      "        'label'      => __('Padding', 'plugin-name'),",
      "        'type'       => Controls_Manager::DIMENSIONS,",
      "        'size_units' => ['px', '%'],",
      "        'selectors'  => [",
      "            '{{WRAPPER}} .subtitle' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;'",
      "        ]",
      "    ]",
      ");"
    ],
    "description": "essubtitle"
  },
  
  
  "estitle": {
    "prefix": "estitle",
    "body": [
      "$$this->add_group_control(",
      "    Group_Control_Typography::get_type(),",
      "    [",
      "        'label'    => esc_html__('Typography', 'plugin-name'),",
      "        'name'     => 'title_typ',",
      "        'selector' => '{{WRAPPER}} .title',",
      "",
      "    ]",
      ");",
      "",
      "$$this->add_control(",
      "    'title_color',",
      "    [",
      "        'label'     => esc_html__('Color', 'plugin-name'),",
      "        'type'      => Controls_Manager::COLOR,",
      "        'selectors' => [",
      "            '{{WRAPPER}} .title' => 'color: {{VALUE}} !important;',",
      "        ],",
      "    ]",
      ");",
      "$$this->add_responsive_control(",
      "    'title_margin',",
      "    [",
      "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
      "        'size_units' => [ 'px', '%', 'em' ],",
      "        'selectors' => [",
      "            '{{WRAPPER}} .title' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
      "        ],",
      "    ]",
      ");",
      "",
      "$$this->add_responsive_control(",
      "    'title_padding',",
      "    [",
      "        'label'      => __('Padding', 'plugin-name'),",
      "        'type'       => Controls_Manager::DIMENSIONS,",
      "        'size_units' => ['px', '%'],",
      "        'selectors'  => [",
      "            '{{WRAPPER}} .title' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;'",
      "        ]",
      "    ]",
      ");"
    ],
    "description": "estitle"
  },
  
  "esdescription": {
    "prefix": "esdescription",
    "body": [
      "$$this->add_group_control(",
      "    Group_Control_Typography::get_type(),",
      "    [",
      "        'label'    => esc_html__('Typography', 'plugin-name'),",
      "        'name'     => 'description_typ',",
      "        'selector' => '{{WRAPPER}} .description',",
      "",
      "    ]",
      ");",
      "",
      "$$this->add_control(",
      "    'description_color',",
      "    [",
      "        'label'     => esc_html__('Color', 'plugin-name'),",
      "        'type'      => Controls_Manager::COLOR,",
      "        'selectors' => [",
      "            '{{WRAPPER}} .description' => 'color: {{VALUE}} !important;',",
      "        ],",
      "    ]",
      ");",
      "$$this->add_responsive_control(",
      "    'description_margin',",
      "    [",
      "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
      "        'size_units' => [ 'px', '%', 'em' ],",
      "        'selectors' => [",
      "            '{{WRAPPER}} .description' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
      "        ],",
      "    ]",
      ");",
      "",
      "$$this->add_responsive_control(",
      "    'description_padding',",
      "    [",
      "        'label'      => __('Padding', 'plugin-name'),",
      "        'type'       => Controls_Manager::DIMENSIONS,",
      "        'size_units' => ['px', '%'],",
      "        'selectors'  => [",
      "            '{{WRAPPER}} .description' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;'",
      "        ]",
      "    ]",
      ");"
    ],
    "description": "esdescription"
  },
  
  "essubheading": {
    "prefix": "essubheading",
    "body": [
      "$$this->add_group_control(",
      "    Group_Control_Typography::get_type(),",
      "    [",
      "        'label'    => esc_html__('Typography', 'plugin-name'),",
      "        'name'     => 'subheading_typ',",
      "        'selector' => '{{WRAPPER}} .subheading',",
      "",
      "    ]",
      ");",
      "",
      "$$this->add_control(",
      "    'subheading_color',",
      "    [",
      "        'label'     => esc_html__('Color', 'plugin-name'),",
      "        'type'      => Controls_Manager::COLOR,",
      "        'selectors' => [",
      "            '{{WRAPPER}} .subheading' => 'color: {{VALUE}} !important;',",
      "        ],",
      "    ]",
      ");",
      "$$this->add_responsive_control(",
      "    'subheading_margin',",
      "    [",
      "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
      "        'size_units' => [ 'px', '%', 'em' ],",
      "        'selectors' => [",
      "            '{{WRAPPER}} .subheading' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
      "        ],",
      "    ]",
      ");",
      "",
      "$$this->add_responsive_control(",
      "    'subheading_padding',",
      "    [",
      "        'label'      => __('Padding', 'plugin-name'),",
      "        'type'       => Controls_Manager::DIMENSIONS,",
      "        'size_units' => ['px', '%'],",
      "        'selectors'  => [",
      "            '{{WRAPPER}} .subheading' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;'",
      "        ]",
      "    ]",
      ");"
    ],
    "description": "essubheading"
  },
  
  "esheading": {
    "prefix": "esheading",
    "body": [
      "$$this->add_group_control(",
      "    Group_Control_Typography::get_type(),",
      "    [",
      "        'label'    => esc_html__('Typography', 'plugin-name'),",
      "        'name'     => 'heading_typ',",
      "        'selector' => '{{WRAPPER}} .heading',",
      "",
      "    ]",
      ");",
      "",
      "$$this->add_control(",
      "    'heading_color',",
      "    [",
      "        'label'     => esc_html__('Color', 'plugin-name'),",
      "        'type'      => Controls_Manager::COLOR,",
      "        'selectors' => [",
      "            '{{WRAPPER}} .heading' => 'color: {{VALUE}} !important;',",
      "        ],",
      "    ]",
      ");",
      "$$this->add_responsive_control(",
      "    'heading_margin',",
      "    [",
      "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
      "        'size_units' => [ 'px', '%', 'em' ],",
      "        'selectors' => [",
      "            '{{WRAPPER}} .heading' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
      "        ],",
      "    ]",
      ");",
      "",
      "$$this->add_responsive_control(",
      "    'heading_padding',",
      "    [",
      "        'label'      => __('Padding', 'plugin-name'),",
      "        'type'       => Controls_Manager::DIMENSIONS,",
      "        'size_units' => ['px', '%'],",
      "        'selectors'  => [",
      "            '{{WRAPPER}} .heading' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;'",
      "        ]",
      "    ]",
      ");"
    ],
    "description": "esheading"
  },
  
  "esheadingtitle": {
    "prefix": "esheadingtitle",
    "body": [
      "$$this->add_group_control(",
      "    Group_Control_Typography::get_type(),",
      "    [",
      "        'label'    => esc_html__('Typography', 'plugin-name'),",
      "        'name'     => 'headingtitle_typ',",
      "        'selector' => '{{WRAPPER}} .headingtitle',",
      "",
      "    ]",
      ");",
      "",
      "$$this->add_control(",
      "    'headingtitle_color',",
      "    [",
      "        'label'     => esc_html__('Color', 'plugin-name'),",
      "        'type'      => Controls_Manager::COLOR,",
      "        'selectors' => [",
      "            '{{WRAPPER}} .headingtitle' => 'color: {{VALUE}} !important;',",
      "        ],",
      "    ]",
      ");",
      "$$this->add_responsive_control(",
      "    'headingtitle_margin',",
      "    [",
      "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
      "        'size_units' => [ 'px', '%', 'em' ],",
      "        'selectors' => [",
      "            '{{WRAPPER}} .headingtitle' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
      "        ],",
      "    ]",
      ");",
      "",
      "$$this->add_responsive_control(",
      "    'headingtitle_padding',",
      "    [",
      "        'label'      => __('Padding', 'plugin-name'),",
      "        'type'       => Controls_Manager::DIMENSIONS,",
      "        'size_units' => ['px', '%'],",
      "        'selectors'  => [",
      "            '{{WRAPPER}} .headingtitle' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;'",
      "        ]",
      "    ]",
      ");"
    ],
    "description": "esheadingtitle"
  },
  
  "esname": {
    "prefix": "esname",
    "body": [
      "$$this->add_group_control(",
      "    Group_Control_Typography::get_type(),",
      "    [",
      "        'label'    => esc_html__('Typography', 'plugin-name'),",
      "        'name'     => 'name_typ',",
      "        'selector' => '{{WRAPPER}} .name',",
      "",
      "    ]",
      ");",
      "",
      "$$this->add_control(",
      "    'name_color',",
      "    [",
      "        'label'     => esc_html__('Color', 'plugin-name'),",
      "        'type'      => Controls_Manager::COLOR,",
      "        'selectors' => [",
      "            '{{WRAPPER}} .name' => 'color: {{VALUE}};',",
      "        ],",
      "    ]",
      ");",
      "$$this->add_responsive_control(",
      "    'name_margin',",
      "    [",
      "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
      "        'size_units' => [ 'px', '%', 'em' ],",
      "        'selectors' => [",
      "            '{{WRAPPER}} .name' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',",
      "        ],",
      "    ]",
      ");",
      "",
      "$$this->add_responsive_control(",
      "    'name_padding',",
      "    [",
      "        'label'      => __('Padding', 'plugin-name'),",
      "        'type'       => Controls_Manager::DIMENSIONS,",
      "        'size_units' => ['px', '%'],",
      "        'selectors'  => [",
      "            '{{WRAPPER}} .name' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};'",
      "        ]",
      "    ]",
      ");"
    ],
    "description": "esname"
  },
  
  "esplace": {
    "prefix": "esplace",
    "body": [
      "$$this->add_group_control(",
      "    Group_Control_Typography::get_type(),",
      "    [",
      "        'label'    => esc_html__('Typography', 'plugin-name'),",
      "        'name'     => 'place_typ',",
      "        'selector' => '{{WRAPPER}} .place',",
      "",
      "    ]",
      ");",
      "",
      "$$this->add_control(",
      "    'place_color',",
      "    [",
      "        'label'     => esc_html__('Color', 'plugin-name'),",
      "        'type'      => Controls_Manager::COLOR,",
      "        'selectors' => [",
      "            '{{WRAPPER}} .place' => 'color: {{VALUE}};',",
      "        ],",
      "    ]",
      ");",
      "$$this->add_responsive_control(",
      "    'place_margin',",
      "    [",
      "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
      "        'size_units' => [ 'px', '%', 'em' ],",
      "        'selectors' => [",
      "            '{{WRAPPER}} .place' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',",
      "        ],",
      "    ]",
      ");",
      "",
      "$$this->add_responsive_control(",
      "    'place_padding',",
      "    [",
      "        'label'      => __('Padding', 'plugin-name'),",
      "        'type'       => Controls_Manager::DIMENSIONS,",
      "        'size_units' => ['px', '%'],",
      "        'selectors'  => [",
      "            '{{WRAPPER}} .place' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};'",
      "        ]",
      "    ]",
      ");"
    ],
    "description": "esplace"
  },
  
  "esdesignation": {
    "prefix": "esdesignation",
    "body": [
      "$$this->add_group_control(",
      "    Group_Control_Typography::get_type(),",
      "    [",
      "        'label'    => esc_html__('Typography', 'plugin-name'),",
      "        'name'     => 'designation_typ',",
      "        'selector' => '{{WRAPPER}} .designation',",
      "",
      "    ]",
      ");",
      "",
      "$$this->add_control(",
      "    'designation_color',",
      "    [",
      "        'label'     => esc_html__('Color', 'plugin-name'),",
      "        'type'      => Controls_Manager::COLOR,",
      "        'selectors' => [",
      "            '{{WRAPPER}} .designation' => 'color: {{VALUE}} !important;',",
      "        ],",
      "    ]",
      ");",
      "$$this->add_responsive_control(",
      "    'designation_margin',",
      "    [",
      "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
      "        'size_units' => [ 'px', '%', 'em' ],",
      "        'selectors' => [",
      "            '{{WRAPPER}} .designation' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
      "        ],",
      "    ]",
      ");",
      "",
      "$$this->add_responsive_control(",
      "    'designation_padding',",
      "    [",
      "        'label'      => __('Padding', 'plugin-name'),",
      "        'type'       => Controls_Manager::DIMENSIONS,",
      "        'size_units' => ['px', '%'],",
      "        'selectors'  => [",
      "            '{{WRAPPER}} .designation' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;'",
      "        ]",
      "    ]",
      ");"
    ],
    "description": "esdesignation"
  },
  
  "esdate": {
    "prefix": "esdate",
    "body": [
      "$$this->add_group_control(",
      "    Group_Control_Typography::get_type(),",
      "    [",
      "        'label'    => esc_html__('Typography', 'plugin-name'),",
      "        'name'     => 'date_typ',",
      "        'selector' => '{{WRAPPER}} .date',",
      "",
      "    ]",
      ");",
      "",
      "$$this->add_control(",
      "    'date_color',",
      "    [",
      "        'label'     => esc_html__('Color', 'plugin-name'),",
      "        'type'      => Controls_Manager::COLOR,",
      "        'selectors' => [",
      "            '{{WRAPPER}} .date' => 'color: {{VALUE}};',",
      "        ],",
      "    ]",
      ");",
      "$$this->add_responsive_control(",
      "    'date_margin',",
      "    [",
      "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
      "        'size_units' => [ 'px', '%', 'em' ],",
      "        'selectors' => [",
      "            '{{WRAPPER}} .date' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',",
      "        ],",
      "    ]",
      ");",
      "",
      "$$this->add_responsive_control(",
      "    'date_padding',",
      "    [",
      "        'label'      => __('Padding', 'plugin-name'),",
      "        'type'       => Controls_Manager::DIMENSIONS,",
      "        'size_units' => ['px', '%'],",
      "        'selectors'  => [",
      "            '{{WRAPPER}} .date' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};'",
      "        ]",
      "    ]",
      ");"
    ],
    "description": "esdate"
  },
  
  "escard": {
    "prefix": "escard",
    "body": [
      "",
      "$$this->add_control(",
      "    'card_color',",
      "    [",
      "        'label' => esc_html__( 'Background Color', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::COLOR,",
      "        'selectors' => [",
      "            '{{WRAPPER}} .card' => 'background-color: {{VALUE}}',",
      "        ],",
      "    ]",
      ");",
      "",
      "",
      "$$this->add_responsive_control(",
      "    'card_padding',",
      "    [",
      "        'label'      => __('Padding', 'plugin-name'),",
      "        'type'       => Controls_Manager::DIMENSIONS,",
      "        'size_units' => ['px', '%'],",
      "        'selectors'  => [",
      "            '{{WRAPPER}} .card' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};'",
      "        ]",
      "    ]",
      ");"
    ],
    "description": "escard"
  },
  
  
  
  
  
  
  
  
  
  "etextsubtitle": {
    "prefix": "etextsubtitle",
    "body": [
      "$$this->add_control(",
      "   'subtitle',",
      "   [",
      "       'label' => esc_html__( 'Subtitle', 'plugin-name' ),",
      "       'type' => \\Elementor\\Controls_Manager::TEXT,",
      "       'default' => esc_html__( 'Default subtitle', 'plugin-name' ),",
      "       'label_block' => true,",
      "   ]",
      ");"
    ],
    "description": "etextsubtitle"
  },
  
  "etextsubheading": {
    "prefix": "etextsubheading",
    "body": [
      "$$this->add_control(",
      "    'subheading',",
      "    [",
      "        'label' => esc_html__( 'Subheading', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::TEXT,",
      "        'default' => esc_html__( 'Default subheading', 'plugin-name' ),",
      "        'label_block' => true,",
      "    ]",
      ");"
    ],
    "description": "etextsubheading"
  },
  
  "etextheading": {
    "prefix": "etextheading",
    "body": [
      "$$this->add_control(",
      "    'heading',",
      "    [",
      "        'label' => esc_html__( 'Heading', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::TEXT,",
      "        'default' => esc_html__( 'Default heading', 'plugin-name' ),",
      "        'label_block' => true,",
      "    ]",
      ");"
    ],
    "description": "etextheading"
  },
  
  "etextheadingtitle": {
    "prefix": "etextheadingtitle",
    "body": [
      "$$this->add_control(",
      "    'headingtitle',",
      "    [",
      "        'label' => esc_html__( 'Heading Title', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::TEXTAREA,",
      "        'default' => esc_html__( 'Default subheading', 'plugin-name' ),",
      "        'label_block' => true,",
      "    ]",
      ");"
    ],
    "description": "etextheadingtitle"
  },
  
  "etextbutton": {
    "prefix": "etextbutton",
    "body": [
      "$$this->add_control(",
      "    'buttontext',",
      "    [",
      "        'label' => esc_html__( 'Button Text', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::TEXT,",
      "        'default' => esc_html__( 'Click Here', 'plugin-name' ),",
      "        'label_block' => true,",
      "    ]",
      ");",
      "",
      "",
      "$$this->add_control(",
      "    'buttonlink',",
      "    [",
      "        'label' => esc_html__( 'Button Link', 'plugin-name' ),",
      "        'type' => \\Elementor\\Controls_Manager::URL,",
      "        'placeholder' => esc_html__( 'https://your-link.com', 'plugin-name' ),",
      "        'default' => [",
      "            'url' => '#',",
      "            'is_external' => true,",
      "            'nofollow' => true,",
      "            'custom_attributes' => '',",
      "        ],",
      "        'label_block' => true,",
      "    ]",
      ");"
    ],
    "description": "etextbutton"
  },
  
  "ddd": {
    "prefix": "ddd",
    "body": [
      "fds \\a'uildshn fksdhfkljhsl s kfhsd klfhsdkhfksdhf"
    ],
    "description": "ddd"
  },
  
  
  
  "eshow": {
    "prefix": "eshow",
    "body": [
      "<?php if( !empty( $$settings[''] ) ) :   ?>",
      "	<?php echo esc_html($$settings[''])?>	",
      "<?php endif ?>"
    ],
    "description": "eshow"
  }
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  }
  