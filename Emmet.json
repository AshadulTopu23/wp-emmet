{
  "Elementor": {
    "WidgetBoilerplate": {
      "prefix": "Ewidget",
      "body": [
        "<?php",
        "/**",
        " * ${1:Widget Name}",
        " *",
        " * @package ${2:Package}",
        " */",
        "",
        "namespace ${3:Namespace};",
        "",
        "use Elementor\\Widget_Base;",
        "use Elementor\\Controls_Manager;",
        "use Elementor\\Group_Control_Typography;",
        "use Elementor\\Group_Control_Background;",
        "use Elementor\\Group_Control_Border;",
        "use Elementor\\Group_Control_Box_Shadow;",
        "",
        "class ${4:Widget_Class_Name} extends Widget_Base {",
        "",
        "\tpublic function get_name() {",
        "\t\treturn '${5:widget-name}';",
        "\t}",
        "",
        "\tpublic function get_title() {",
        "\t\treturn __( '${6:Widget Title}', '${7:text-domain}' );",
        "\t}",
        "",
        "\tpublic function get_icon() {",
        "\t\treturn '${8:eicon-icon-name}';",
        "\t}",
        "",
        "\tpublic function get_categories() {",
        "\t\treturn [ '${9:category-name}' ];",
        "\t}",
        "",
        "\tprotected function _register_controls() {",
        "\t\t// Content Tab",
        "\t\t$this->start_controls_section(",
        "\t\t\t'content_section',",
        "\t\t\t[",
        "\t\t\t\t'label' => esc_html__( 'Content', '${7:text-domain}' ),",
        "\t\t\t\t'tab' => Controls_Manager::TAB_CONTENT,",
        "\t\t\t]",
        "\t\t);",
        "\t\t",
        "\t\t// Add controls here",
        "\t\t",
        "\t\t$this->end_controls_section();",
        "",
        "\t\t// Style Tab",
        "\t\t$this->start_controls_section(",
        "\t\t\t'style_section',",
        "\t\t\t[",
        "\t\t\t\t'label' => esc_html__( 'Style', '${7:text-domain}' ),",
        "\t\t\t\t'tab' => Controls_Manager::TAB_STYLE,",
        "\t\t\t]",
        "\t\t);",
        "\t\t",
        "\t\t// Add style controls here",
        "\t\t",
        "\t\t$this->end_controls_section();",
        "\t}",
        "",
        "\tprotected function render() {",
        "\t\t\$settings = \$this->get_settings_for_display();",
        "\t\t// Output the widget HTML",
        "\t}",
        "",
        "\tprotected function _content_template() {",
        "\t\t// JS template for editor preview",
        "\t}",
        "}"
      ],
      "description": "Complete Elementor widget boilerplate"
    },
    "TextControl": {
      "prefix": "Etext",
      "body": [
        "$this->add_control(",
        "\t'${1:control_name}',",
        "\t[",
        "\t\t'label' => esc_html__( '${2:Label}', '${3:text-domain}' ),",
        "\t\t'type' => Controls_Manager::TEXT,",
        "\t\t'default' => esc_html__( '${4:Default text}', '${3:text-domain}' ),",
        "\t\t'label_block' => ${5:true},",
        "\t]",
        ");"
      ],
      "description": "Text control"
    },
    "TextareaControl": {
      "prefix": "Etextarea",
      "body": [
        "$this->add_control(",
        "\t'${1:control_name}',",
        "\t[",
        "\t\t'label' => esc_html__( '${2:Label}', '${3:text-domain}' ),",
        "\t\t'type' => Controls_Manager::TEXTAREA,",
        "\t\t'rows' => ${4:10},",
        "\t\t'default' => esc_html__( '${5:Default text}', '${3:text-domain}' ),",
        "\t]",
        ");"
      ],
      "description": "Textarea control"
    },
    "WysiwygControl": {
      "prefix": "Ewysiwyg",
      "body": [
        "$this->add_control(",
        "\t'${1:control_name}',",
        "\t[",
        "\t\t'label' => esc_html__( '${2:Label}', '${3:text-domain}' ),",
        "\t\t'type' => Controls_Manager::WYSIWYG,",
        "\t\t'default' => esc_html__( '${4:Default content}', '${3:text-domain}' ),",
        "\t]",
        ");"
      ],
      "description": "WYSIWYG editor control"
    },
    "SelectControl": {
      "prefix": "Eselect",
      "body": [
        "$this->add_control(",
        "\t'${1:control_name}',",
        "\t[",
        "\t\t'label' => esc_html__( '${2:Label}', '${3:text-domain}' ),",
        "\t\t'type' => Controls_Manager::SELECT,",
        "\t\t'default' => '${4:default_value}',",
        "\t\t'options' => [",
        "\t\t\t'${5:value1}' => esc_html__( '${6:Label 1}', '${3:text-domain}' ),",
        "\t\t\t'${7:value2}' => esc_html__( '${8:Label 2}', '${3:text-domain}' ),",
        "\t\t],",
        "\t]",
        ");"
      ],
      "description": "Select dropdown control"
    },
    "ColorControl": {
      "prefix": "Ecolor",
      "body": [
        "$this->add_control(",
        "\t'${1:control_name}',",
        "\t[",
        "\t\t'label' => esc_html__( '${2:Label}', '${3:text-domain}' ),",
        "\t\t'type' => Controls_Manager::COLOR,",
        "\t\t'selectors' => [",
        "\t\t\t'{{WRAPPER}} ${4:.selector}' => 'color: {{VALUE}}',",
        "\t\t],",
        "\t]",
        ");"
      ],
      "description": "Color picker control"
    },
    "ImageControl": {
      "prefix": "Eimage",
      "body": [
        "$this->add_control(",
        "\t'${1:control_name}',",
        "\t[",
        "\t\t'label' => esc_html__( '${2:Label}', '${3:text-domain}' ),",
        "\t\t'type' => Controls_Manager::MEDIA,",
        "\t\t'default' => [",
        "\t\t\t'url' => \\Elementor\\Utils::get_placeholder_image_src(),",
        "\t\t],",
        "\t]",
        ");"
      ],
      "description": "Image upload control"
    },
    "IconControl": {
      "prefix": "Eicon",
      "body": [
        "$this->add_control(",
        "\t'${1:control_name}',",
        "\t[",
        "\t\t'label' => esc_html__( '${2:Label}', '${3:text-domain}' ),",
        "\t\t'type' => Controls_Manager::ICONS,",
        "\t\t'default' => [",
        "\t\t\t'value' => '${4:fas fa-star}',",
        "\t\t\t'library' => '${5:fa-solid}',",
        "\t\t],",
        "\t]",
        ");"
      ],
      "description": "Icon selector control"
    },
    "SliderControl": {
      "prefix": "Eslider",
      "body": [
        "$this->add_control(",
        "\t'${1:control_name}',",
        "\t[",
        "\t\t'label' => esc_html__( '${2:Label}', '${3:text-domain}' ),",
        "\t\t'type' => Controls_Manager::SLIDER,",
        "\t\t'size_units' => [ 'px', '%' ],",
        "\t\t'range' => [",
        "\t\t\t'px' => [",
        "\t\t\t\t'min' => ${4:0},",
        "\t\t\t\t'max' => ${5:1000},",
        "\t\t\t\t'step' => ${6:1},",
        "\t\t\t],",
        "\t\t],",
        "\t\t'selectors' => [",
        "\t\t\t'{{WRAPPER}} ${7:.selector}' => 'font-size: {{SIZE}}{{UNIT}};',",
        "\t\t],",
        "\t]",
        ");"
      ],
      "description": "Slider control"
    },
    "SwitchControl": {
      "prefix": "Eswitch",
      "body": [
        "$this->add_control(",
        "\t'${1:control_name}',",
        "\t[",
        "\t\t'label' => esc_html__( '${2:Label}', '${3:text-domain}' ),",
        "\t\t'type' => Controls_Manager::SWITCHER,",
        "\t\t'label_on' => esc_html__( '${4:Show}', '${3:text-domain}' ),",
        "\t\t'label_off' => esc_html__( '${5:Hide}', '${3:text-domain}' ),",
        "\t\t'return_value' => '${6:yes}',",
        "\t\t'default' => '${7:yes}',",
        "\t]",
        ");"
      ],
      "description": "Switch toggle control"
    },
    "RepeaterControl": {
      "prefix": "Erepeater",
      "body": [
        "$repeater = new \\Elementor\\Repeater();",
        "",
        "$repeater->add_control(",
        "\t'${1:item_title}',",
        "\t[",
        "\t\t'label' => esc_html__( '${2:Title}', '${3:text-domain}' ),",
        "\t\t'type' => Controls_Manager::TEXT,",
        "\t\t'default' => esc_html__( '${4:Default Title}', '${3:text-domain}' ),",
        "\t\t'label_block' => true,",
        "\t]",
        ");",
        "",
        "$this->add_control(",
        "\t'${5:repeater_name}',",
        "\t[",
        "\t\t'label' => esc_html__( '${6:Repeater Label}', '${3:text-domain}' ),",
        "\t\t'type' => Controls_Manager::REPEATER,",
        "\t\t'fields' => $repeater->get_controls(),",
        "\t\t'default' => [",
        "\t\t\t[",
        "\t\t\t\t'${1:item_title}' => esc_html__( '${7:Item 1}', '${3:text-domain}' ),",
        "\t\t\t],",
        "\t\t\t[",
        "\t\t\t\t'${1:item_title}' => esc_html__( '${8:Item 2}', '${3:text-domain}' ),",
        "\t\t\t],",
        "\t\t],",
        "\t\t'title_field' => '{{{ ${1:item_title} }}}',",
        "\t]",
        ");"
      ],
      "description": "Repeater control"
    },
    "TypographyGroup": {
      "prefix": "Etypo",
      "body": [
        "$this->add_group_control(",
        "\tGroup_Control_Typography::get_type(),",
        "\t[",
        "\t\t'name' => '${1:typography_name}',",
        "\t\t'selector' => '{{WRAPPER}} ${2:.selector}',",
        "\t]",
        ");"
      ],
      "description": "Typography group control"
    },
    "BackgroundGroup": {
      "prefix": "Ebackground",
      "body": [
        "$this->add_group_control(",
        "\tGroup_Control_Background::get_type(),",
        "\t[",
        "\t\t'name' => '${1:background_name}',",
        "\t\t'label' => esc_html__( '${2:Background}', '${3:text-domain}' ),",
        "\t\t'types' => [ 'classic', 'gradient' ],",
        "\t\t'selector' => '{{WRAPPER}} ${4:.selector}',",
        "\t]",
        ");"
      ],
      "description": "Background group control"
    },
    "BorderGroup": {
      "prefix": "Eborder",
      "body": [
        "$this->add_group_control(",
        "\tGroup_Control_Border::get_type(),",
        "\t[",
        "\t\t'name' => '${1:border_name}',",
        "\t\t'selector' => '{{WRAPPER}} ${2:.selector}',",
        "\t]",
        ");"
      ],
      "description": "Border group control"
    },
    "BoxShadowGroup": {
      "prefix": "Eboxshadow",
      "body": [
        "$this->add_group_control(",
        "\tGroup_Control_Box_Shadow::get_type(),",
        "\t[",
        "\t\t'name' => '${1:shadow_name}',",
        "\t\t'selector' => '{{WRAPPER}} ${2:.selector}',",
        "\t]",
        ");"
      ],
      "description": "Box shadow group control"
    },
    "Section": {
      "prefix": "Esection",
      "body": [
        "$this->start_controls_section(",
        "\t'${1:section_name}',",
        "\t[",
        "\t\t'label' => esc_html__( '${2:Section Label}', '${3:text-domain}' ),",
        "\t\t'tab' => Controls_Manager::TAB_${4:CONTENT},",
        "\t]",
        ");",
        "",
        "// Add controls here",
        "",
        "$this->end_controls_section();"
      ],
      "description": "Control section"
    },
    "Tabs": {
      "prefix": "Etabs",
      "body": [
        "$this->start_controls_tabs(",
        "\t'${1:tabs_name}'",
        ");",
        "",
        "$this->start_controls_tab(",
        "\t'${2:tab_name}_normal',",
        "\t[",
        "\t\t'label' => esc_html__( '${3:Normal}', '${4:text-domain}' ),",
        "\t]",
        ");",
        "",
        "// Normal tab controls",
        "",
        "$this->end_controls_tab();",
        "",
        "$this->start_controls_tab(",
        "\t'${2:tab_name}_hover',",
        "\t[",
        "\t\t'label' => esc_html__( '${5:Hover}', '${4:text-domain}' ),",
        "\t]",
        ");",
        "",
        "// Hover tab controls",
        "",
        "$this->end_controls_tab();",
        "",
        "$this->end_controls_tabs();"
      ],
      "description": "Control tabs"
    },
    "RenderMethod": {
      "prefix": "Erender",
      "body": [
        "protected function render() {",
        "\t$settings = $this->get_settings_for_display();",
        "\t?>",
        "\t<div class=\"${1:widget-class}\">",
        "\t\t<?php if ( ! empty( \$settings['title'] ) : ?>",
        "\t\t\t<h2><?php echo esc_html( \$settings['title'] ); ?></h2>",
        "\t\t<?php endif; ?>",
        "\t</div>",
        "\t<?php",
        "}"
      ],
      "description": "Render method"
    },
    "ContentTemplate": {
      "prefix": "Etemplate",
      "body": [
        "protected function _content_template() {",
        "\t?>",
        "\t<#",
        "\t\tif ( settings.title ) { #>",
        "\t\t\t<h2>{{{ settings.title }}}</h2>",
        "\t\t<# } #>",
        "\t<?php",
        "}"
      ],
      "description": "Content template method"
    },
    "RenderIcon": {
      "prefix": "Erendericon",
      "body": [
        "<?php \\Elementor\\Icons_Manager::render_icon( \$settings['${1:icon}'], [ 'aria-hidden' => 'true' ] ); ?>"
      ],
      "description": "Render icon in template"
    },
    "ContentStart": {
      "prefix": "Econtentstart",
      "body": [
        "$this->start_controls_section(",
        "    'content',",
        "    [",
        "        'label' => esc_html__('', 'plugin-name')",
        "    ]",
        ");",
        "",
        "$this->end_controls_section();"
      ],
      "description": "Starts a content section in Elementor widget"
    },
    "StyleContent": {
      "prefix": "Estyletab",
      "body": [
        "$this->start_controls_section(",
        "    'style',",
        "    [",
        "        'label' => esc_html__('', 'plugin-name'),",
        "        'tab'   => Controls_Manager::TAB_STYLE,",
        "    ]",
        ");",
        "",
        "$this->end_controls_section();"
      ],
      "description": "Starts a style section in Elementor widget"
    },
    "TextTitle": {
      "prefix": "Etexttitle",
      "body": [
        "$this->add_control(",
        "    'title',",
        "    [",
        "        'label' => esc_html__( 'Title', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::TEXT,",
        "        'default' => esc_html__( 'Default title', 'plugin-name' ),",
        "        'label_block' => true,",
        "    ]",
        ");"
      ],
      "description": "Adds a text control for titles"
    },
    "TextSubtitle": {
      "prefix": "Etextsubtitle",
      "body": [
        "$this->add_control(",
        "    'subtitle',",
        "    [",
        "        'label' => esc_html__( 'Subtitle', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::TEXT,",
        "        'default' => esc_html__( 'Default subtitle', 'plugin-name' ),",
        "        'label_block' => true,",
        "    ]",
        ");"
      ],
      "description": "Adds a text control for subtitles"
    },
    "TextSubheading": {
      "prefix": "Etextsubheading",
      "body": [
        "$this->add_control(",
        "    'subheading',",
        "    [",
        "        'label' => esc_html__( 'Subheading', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::TEXT,",
        "        'default' => esc_html__( 'Default subheading', 'plugin-name' ),",
        "        'label_block' => true,",
        "    ]",
        ");"
      ],
      "description": "Adds a text control for subheadings"
    },
    "TextHeading": {
      "prefix": "Etextheading",
      "body": [
        "$this->add_control(",
        "    'heading',",
        "    [",
        "        'label' => esc_html__( 'Heading', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::TEXT,",
        "        'default' => esc_html__( 'Default heading', 'plugin-name' ),",
        "        'label_block' => true,",
        "    ]",
        ");"
      ],
      "description": "Adds a text control for headings"
    },
    "TextHeadingTitle": {
      "prefix": "Etextheadingtitle",
      "body": [
        "$this->add_control(",
        "    'headingtitle',",
        "    [",
        "        'label' => esc_html__( 'Heading Title', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::TEXTAREA,",
        "        'default' => esc_html__( 'Default heading title', 'plugin-name' ),",
        "        'label_block' => true,",
        "    ]",
        ");"
      ],
      "description": "Adds a textarea for heading titles"
    },
    "TextButton": {
      "prefix": "Etextbutton",
      "body": [
        "$this->add_control(",
        "    'buttontext',",
        "    [",
        "        'label' => esc_html__( 'Button Text', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::TEXT,",
        "        'default' => esc_html__( 'Click Here', 'plugin-name' ),",
        "        'label_block' => true,",
        "    ]",
        ");",
        "",
        "$this->add_control(",
        "    'buttonlink',",
        "    [",
        "        'label' => esc_html__( 'Button Link', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::URL,",
        "        'placeholder' => esc_html__( 'https://your-link.com', 'plugin-name' ),",
        "        'default' => [",
        "            'url' => '#',",
        "            'is_external' => true,",
        "            'nofollow' => true,",
        "            'custom_attributes' => '',",
        "        ],",
        "        'label_block' => true,",
        "    ]",
        ");"
      ],
      "description": "Adds button text and link controls"
    },
    "NumberControl": {
      "prefix": "Enumber",
      "body": [
        "$this->add_control(",
        "    'price',",
        "    [",
        "        'label' => esc_html__( 'Price', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::NUMBER,",
        "        'min' => 5,",
        "        'max' => 100,",
        "        'step' => 5,",
        "        'default' => 10,",
        "    ]",
        ");"
      ],
      "description": "Adds a number control with min/max/step"
    },
    "TextareaDescription": {
      "prefix": "Etextareadesc",
      "body": [
        "$this->add_control(",
        "    'description',",
        "    [",
        "        'label' => esc_html__( 'Description', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::TEXTAREA,",
        "        'rows' => 10,",
        "        'default' => esc_html__( 'Default description', 'plugin-name' ),",
        "    ]",
        ");"
      ],
      "description": "Adds a textarea control for descriptions"
    },
    "WysiwygControl": {
      "prefix": "Ewisi",
      "body": [
        "$this->add_control(",
        "    'item_description',",
        "    [",
        "        'label' => esc_html__( 'Description', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::WYSIWYG,",
        "        'default' => esc_html__( 'Default description', 'plugin-name' ),",
        "    ]",
        ");"
      ],
      "description": "Adds a WYSIWYG editor control"
    },
    "SelectStyle": {
      "prefix": "Eselectstyle",
      "body": [
        "$this->add_control(",
        "    'style_design',",
        "    [",
        "        'label'     => esc_html__( 'Style', 'plugin-name' ),",
        "        'type'      => \\Elementor\\Controls_Manager::SELECT,",
        "        'default'   => 'style_one',",
        "        'options'   => [",
        "            'style_one' => esc_html__( 'Style One', 'plugin-name' ),",
        "            'style_two' => esc_html__( 'Style Two', 'plugin-name' ),",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Adds a dropdown select control"
    },
    "ColorControl": {
      "prefix": "Ecolor",
      "body": [
        "$this->add_control(",
        "    '_color',",
        "    [",
        "        'label' => esc_html__( 'Color', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::COLOR,",
        "        'selectors' => [",
        "            '{{WRAPPER}} .title' => 'color: {{VALUE}} !important',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Adds a color picker control"
    },
    "FontFamily": {
      "prefix": "Efontfamily",
      "body": [
        "$this->add_control(",
        "    'font_family',",
        "    [",
        "        'label' => esc_html__( 'Font Family', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::FONT,",
        "        'default' => \"'Open Sans', sans-serif\",",
        "        'selectors' => [",
        "            '{{WRAPPER}} .title' => 'font-family: {{VALUE}}',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Adds a font family control"
    },
    "DateTime": {
      "prefix": "Edatetime",
      "body": [
        "$this->add_control(",
        "    'due_date',",
        "    [",
        "        'label' => esc_html__( 'Due Date', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DATE_TIME,",
        "    ]",
        ");"
      ],
      "description": "Adds a date-time picker control"
    },
    "RepeaterList": {
      "prefix": "Erepeaterlist",
      "body": [
        "$repeater = new \\Elementor\\Repeater();",
        "",
        "$repeater->add_control(",
        "    'list_title', [",
        "        'label' => esc_html__( 'Title', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::TEXT,",
        "        'default' => esc_html__( 'List Title' , 'plugin-name' ),",
        "        'label_block' => true,",
        "    ]",
        ");",
        "",
        "$repeater->add_control(",
        "    'list_content', [",
        "        'label' => esc_html__( 'Content', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::WYSIWYG,",
        "        'default' => esc_html__( 'List Content' , 'plugin-name' ),",
        "        'show_label' => false,",
        "    ]",
        ");",
        "",
        "$this->add_control(",
        "    'list_repeater',",
        "    [",
        "        'label' => esc_html__( 'Repeater List', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::REPEATER,",
        "        'fields' => $repeater->get_controls(),",
        "        'default' => [",
        "            [",
        "                'list_title' => esc_html__( 'Title #1', 'plugin-name' ),",
        "                'list_content' => esc_html__( 'Item content. Click the edit button to change this text.', 'plugin-name' ),",
        "            ],",
        "            [",
        "                'list_title' => esc_html__( 'Title #2', 'plugin-name' ),",
        "                'list_content' => esc_html__( 'Item content. Click the edit button to change this text.', 'plugin-name' ),",
        "            ],",
        "        ],",
        "        'title_field' => '{{{ list_title }}}',",
        "    ]",
        ");"
      ],
      "description": "Adds a repeater control for lists"
    },
    "StyleTabs": {
      "prefix": "Estyletabs",
      "body": [
        "$this->start_controls_tabs(",
        "    'style_tabs'",
        ");",
        "",
        "$this->start_controls_tab(",
        "    'style_normal_tab',",
        "    [",
        "        'label' => esc_html__( 'Normal', 'plugin-name' ),",
        "    ]",
        ");",
        "",
        "$this->add_control();",
        "",
        "$this->end_controls_tab();",
        "$this->start_controls_tab(",
        "    'style_hover_tab',",
        "    [",
        "        'label' => esc_html__( 'Hover', 'plugin-name' ),",
        "    ]",
        ");",
        "",
        "$this->add_control();",
        "",
        "$this->end_controls_tab();",
        "",
        "$this->end_controls_tabs();"
      ],
      "description": "Adds tabs for normal/hover states"
    },
    "SliderControl": {
      "prefix": "Eslider",
      "body": [
        "$this->add_responsive_control(",
        "    'icon_size',",
        "    [",
        "        'label' => esc_html__( 'Size', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::SLIDER,",
        "        'size_units' => [ 'px', '%' ],",
        "        'range' => [",
        "            'px' => [",
        "                'min' => 1,",
        "                'max' => 100,",
        "                'step' => 1,",
        "            ],",
        "            '%' => [",
        "                'min' => 1,",
        "                'max' => 100,",
        "            ],",
        "        ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .icon svg' => 'width: {{SIZE}}{{UNIT}};',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Adds a slider control for sizes"
    },
    "widthControl": {
      "prefix": "Ewidth",
      "body": [
        "$this->add_responsive_control(",
        "    '_width',",
        "    [",
        "        'label' => esc_html__( 'Width', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::SLIDER,",
        "        'size_units' => [ 'px', '%' ],",
        "        'range' => [",
        "            'px' => [",
        "                'min' => 1,",
        "                'max' => 100,",
        "                'step' => 1,",
        "            ],",
        "            '%' => [",
        "                'min' => 1,",
        "                'max' => 100,",
        "            ],",
        "        ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .selector' => 'width: {{SIZE}}{{UNIT}};',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Adds a slider control for width"
    },
    "heightControl": {
      "prefix": "Eheight",
      "body": [
        "$this->add_responsive_control(",
        "    '_height',",
        "    [",
        "        'label' => esc_html__( 'Height', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::SLIDER,",
        "        'size_units' => [ 'px', '%' ],",
        "        'range' => [",
        "            'px' => [",
        "                'min' => 1,",
        "                'max' => 100,",
        "                'step' => 1,",
        "            ],",
        "            '%' => [",
        "                'min' => 1,",
        "                'max' => 100,",
        "            ],",
        "        ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .selector' => 'height: {{SIZE}}{{UNIT}};',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Adds a slider control for height"
    },
    "sizeControl": {
      "prefix": "Esize",
      "body": [
        "$this->add_responsive_control(",
        "    'icon_size',",
        "    [",
        "        'label' => esc_html__( 'Size', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::SLIDER,",
        "        'size_units' => [ 'px', '%' ],",
        "        'range' => [",
        "            'px' => [",
        "                'min' => 1,",
        "                'max' => 100,",
        "                'step' => 1,",
        "            ],",
        "            '%' => [",
        "                'min' => 1,",
        "                'max' => 100,",
        "            ],",
        "        ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .selector' => 'width: {{SIZE}}{{UNIT}}; height: {{SIZE}}{{UNIT}};',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Adds a slider control for sizes"
    },
    "MarginControl": {
      "prefix": "Emargin",
      "body": [
        "$this->add_responsive_control(",
        "    '_margin',",
        "    [",
        "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%', 'em' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .title' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Adds margin control with dimensions"
    },
    "PaddingControl": {
      "prefix": "Epadding",
      "body": [
        "$this->add_responsive_control(",
        "    '_padding',",
        "    [",
        "        'label' => esc_html__( 'Padding', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .title' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Adds padding control with dimensions"
    },
    "LinkControl": {
      "prefix": "Elink",
      "body": [
        "$this->add_control(",
        "    'website_link',",
        "    [",
        "        'label' => esc_html__( 'Link', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::URL,",
        "        'placeholder' => esc_html__( 'https://your-link.com', 'plugin-name' ),",
        "        'default' => [",
        "            'url' => '#',",
        "            'is_external' => true,",
        "            'nofollow' => true,",
        "            'custom_attributes' => '',",
        "        ],",
        "        'label_block' => true,",
        "    ]",
        ");"
      ],
      "description": "Adds a URL control for links"
    },
    "ImageUpload": {
      "prefix": "Eimageupload",
      "body": [
        "$this->add_control(",
        "    'image',",
        "    [",
        "        'label' => esc_html__( 'Choose Image', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::MEDIA,",
        "        'default' => [",
        "            'url' => \\Elementor\\Utils::get_placeholder_image_src(),",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Adds an image upload control"
    },
    "IconPicker": {
      "prefix": "Eiconpicker",
      "body": [
        "$this->add_control(",
        "    '_icon',",
        "    [",
        "        'label' => esc_html__( 'Icon', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::ICONS,",
        "        'default' => [",
        "            'value' => 'fas fa-star',",
        "            'library' => 'solid',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Adds an icon picker control"
    },
    "BoxShadow": {
      "prefix": "Eshadow",
      "body": [
        "$this->add_group_control(",
        "    \\Elementor\\Group_Control_Box_Shadow::get_type(),",
        "    [",
        "        'name' => 'box_shadow',",
        "        'selector' => '{{WRAPPER}} .your-class',",
        "    ]",
        ");"
      ],
      "description": "Adds a box shadow control"
    },
    "TypographyControl": {
      "prefix": "Etypography",
      "body": [
        "$this->add_group_control(",
        "    \\Elementor\\Group_Control_Typography::get_type(),",
        "    [",
        "        'name' => '_typography',",
        "        'selector' => '{{WRAPPER}} .title',",
        "    ]",
        ");"
      ],
      "description": "Adds typography control"
    },
    "BorderColor": {
      "prefix": "Ebordercolor",
      "body": [
        "$this->add_control(",
        "    '_color',",
        "    [",
        "        'label' => esc_html__( 'Card Border Color', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::COLOR,",
        "        'selectors' => [",
        "            '{{WRAPPER}} .title' => 'border:1px solid {{VALUE}} !important',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Adds a border color control"
    },
    "OpacityControl": {
      "prefix": "Eopacity",
      "body": [
        "$this->add_control(",
        "    '_opacity',",
        "    [",
        "        'label' => esc_html__( 'Border Color Opacity', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::SLIDER,",
        "        'range' => [",
        "            'min' => 0,",
        "            'max' => 1,",
        "            'step' => 0.01,",
        "        ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .selector' => 'opacity: {{SIZE}}',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Adds an opacity slider control"
    },
    "BackgroundControl": {
      "prefix": "Ebackground",
      "body": [
        "$this->add_group_control(",
        "    \\Elementor\\Group_Control_Background::get_type(),",
        "    [",
        "        'name' => 'background',",
        "        'label' => esc_html__( 'Background', 'plugin-name' ),",
        "        'types' => [ 'classic', 'gradient', 'video' ],",
        "        'selector' => '{{WRAPPER}} .title',",
        "    ]",
        ");"
      ],
      "description": "Adds background control (classic/gradient/video)"
    },
    "Condition": {
      "prefix": "Econdition",
      "body": [
        "'condition' => [",
        "    'style' => 'style_two'",
        "]"
      ],
      "description": "Adds a condition for control visibility"
    },
    "CSSText": {
      "prefix": "Ecsstext",
      "body": [
        "$this->add_responsive_control(",
        "    'accordion_height',",
        "    [",
        "        'label' => esc_html__( 'Height', 'plugin-name' ),",
        "        'type' => Controls_Manager::TEXT,",
        "        'default' => '400',",
        "        'description' => 'Unit in px',",
        "        'selectors' => [",
        "            '{{WRAPPER}} .img-accordion ' => 'height: {{VALUE}}px;',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Adds a custom CSS textarea control"
    },
    "TypographyColorMargin": {
      "prefix": "Etypothree",
      "body": [
        "$this->add_group_control(",
        "    Group_Control_Typography::get_type(),",
        "    [",
        "        'label' => esc_html__('Typography', 'plugin-name'),",
        "        'name' => '_typ',",
        "        'selector' => '{{WRAPPER}} .title span',",
        "    ]",
        ");",
        "",
        "$this->add_control(",
        "    '_color',",
        "    [",
        "        'label' => esc_html__('Color', 'plugin-name'),",
        "        'type' => Controls_Manager::COLOR,",
        "        'selectors' => [",
        "            '{{WRAPPER}} .title span' => 'color: {{VALUE}} !important;',",
        "        ],",
        "    ]",
        ");",
        "$this->add_responsive_control(",
        "    '_margin',",
        "    [",
        "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%', 'em' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .title span' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Adds typography, color, and margin controls"
    },
    "SVGIconStyle": {
      "prefix": "Esvgiconstyle",
      "body": [
        "$this->add_control(",
        "    '_icon_color',",
        "    [",
        "        'label' => esc_html__( 'SVG Color', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::COLOR,",
        "        'selectors' => [",
        "            '{{WRAPPER}} .selector svg path' => 'fill: {{VALUE}}',",
        "        ],",
        "    ]",
        ");",
        "",
        "$this->add_responsive_control(",
        "    '_svg_size',",
        "    [",
        "        'label' => esc_html__( 'SVG Size', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::SLIDER,",
        "        'size_units' => [ 'px' ],",
        "        'range' => [",
        "            'px' => [",
        "                'min' => 10,",
        "                'max' => 100,",
        "                'step' => 1,",
        "            ],",
        "        ],",
        "        'default' => [",
        "            'unit' => 'px',",
        "        ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .selector svg' => 'width: {{SIZE}}{{UNIT}};height: {{SIZE}}{{UNIT}};',",
        "        ],",
        "    ]",
        ");",
        "",
        "$this->add_responsive_control(",
        "    '_svg_padding',",
        "    [",
        "        'label' => esc_html__( 'SVG Padding', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%', 'em' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .selector svg' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',",
        "        ],",
        "    ]",
        ");",
        "",
        "$this->add_responsive_control(",
        "    '_svg_margin',",
        "    [",
        "        'label' => esc_html__( 'SVG Margin', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%', 'em' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .selector svg' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',",
        "        ],",
        "    ]",
        ");",
        "$this->add_responsive_control(",
        "    '_svg_border_radius',",
        "    [",
        "        'label' => esc_html__( 'SVG Border Radius', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%', 'em' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .selector svg' => 'border-radius: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',",
        "        ],",
        "    ]",
        ");"
        
      ],
      "description": "Adds SVG/icon color and size controls"
    },
    "AttrOutput": {
      "prefix": "Eattr",
      "body": [
        "<?php echo esc_attr__('service_image','plugin-name')?>"
      ],
      "description": "Outputs escaped attribute for translation"
    },
    "Divider": {
      "prefix": "Edivider",
      "body": [
        "$this->add_control(",
        "    'hr',",
        "    [",
        "        'type' => \\Elementor\\Controls_Manager::DIVIDER,",
        "    ]",
        ");"
      ],
      "description": "Adds a divider control"
    },
    "HeadingControl": {
      "prefix": "Eheading",
      "body": [
        "$this->add_control(",
        "    '_heading',",
        "    [",
        "        'label' => esc_html__( 'Heading', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::HEADING,",
        "        'separator' => 'before',",
        "    ]",
        ");"
      ],
      "description": "Adds a heading control for sections"
    },
    "AlignmentControl": {
      "prefix": "Ealignment",
      "body": [
        "$this->add_responsive_control(",
        "    '_content_align',",
        "    [",
        "        'label' => esc_html__( 'Alignment', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::CHOOSE,",
        "        'options' => [",
        "            'left' => [",
        "                'title' => esc_html__( 'Left', 'plugin-name' ),",
        "                'icon' => 'eicon-text-align-left',",
        "            ],",
        "            'center' => [",
        "                'title' => esc_html__( 'Center', 'plugin-name' ),",
        "                'icon' => 'eicon-text-align-center',",
        "            ],",
        "            'right' => [",
        "                'title' => esc_html__( 'Right', 'plugin-name' ),",
        "                'icon' => 'eicon-text-align-right',",
        "            ],",
        "            'justify' => [",
        "                'title' => esc_html__( 'Justified', 'plugin-name' ),",
        "                'icon' => 'eicon-text-align-justify',",
        "            ],",
        "        ],",
        "        'default' => 'center',",
        "        'selectors' => [",
        "            '{{WRAPPER}} .title' => 'text-align: {{VALUE}};',",
        "            '{{WRAPPER}} .section-title1 p' => 'text-align: {{VALUE}};',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Adds text alignment control"
    },
    "BorderRadius": {
      "prefix": "Eradius",
      "body": [
        "$this->add_responsive_control(",
        "    '_border_radius',",
        "    [",
        "        'label' => esc_html__( 'Border Radius', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .title' => 'border-radius: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Adds border radius control"
    },
    "MultipleConditions": {
      "prefix": "Econditions",
      "body": [
        "'condition' => [",
        "    '_style' => ['style_one','style_two'],",
        "]"
      ],
      "description": "Adds multiple conditions for visibility"
    },
    "TypographyColorMarginPadding": {
      "prefix": "Etypofour",
      "body": [
        "$this->add_group_control(",
        "    Group_Control_Typography::get_type(),",
        "    [",
        "        'label' => esc_html__('Typography', 'plugin-name'),",
        "        'name' => '_typ',",
        "        'selector' => '{{WRAPPER}} .title',",
        "    ]",
        ");",
        "",
        "$this->add_control(",
        "    '_color',",
        "    [",
        "        'label' => esc_html__('Color', 'plugin-name'),",
        "        'type' => Controls_Manager::COLOR,",
        "        'selectors' => [",
        "            '{{WRAPPER}} .title' => 'color: {{VALUE}} !important;',",
        "        ],",
        "    ]",
        ");",
        "$this->add_responsive_control(",
        "    '_margin',",
        "    [",
        "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%', 'em' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .title' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
        "        ],",
        "    ]",
        ");",
        "",
        "$this->add_responsive_control(",
        "    '_padding',",
        "    [",
        "        'label' => esc_html__( 'Padding', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .title' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Adds typography, color, margin, and padding controls"
    },
    "SettingsOutput": {
      "prefix": "Esettings",
      "body": [
        "<?php echo esc_html($settings['']) ?>"
      ],
      "description": "Outputs escaped settings value"
    },
    "SwitchControl": {
      "prefix": "Eswitch",
      "body": [
        "$this->add_control(",
        "    '_show',",
        "    [",
        "        'label' => esc_html__( 'Show Navigation', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::SWITCHER,",
        "        'label_on' => esc_html__( 'Show', 'plugin-name' ),",
        "        'label_off' => esc_html__( 'Hide', 'plugin-name' ),",
        "        'return_value' => 'yes',",
        "        'default' => 'yes',",
        "    ]",
        ");"
      ],
      "description": "Adds a switcher control (show/hide)"
    },
    "WPKses": {
      "prefix": "Ewpkses",
      "body": [
        "<?php echo wp_kses($settings['title'], wp_kses_allowed_html('post')) ?>"
      ],
      "description": "Outputs settings with wp_kses sanitization"
    },
    "EscHtml": {
      "prefix": "Eeschtml",
      "body": [
        "<?php echo esc_html($settings['']) ?>"
      ],
      "description": "Outputs escaped HTML settings value"
    },
    "IconShow": {
      "prefix": "Eiconshow",
      "body": [
        "<?php \\Elementor\\Icons_Manager::render_icon( $settings['icon'], [ 'aria-hidden' => 'true' ] ); ?>"
      ],
      "description": "Renders an icon from settings"
    },
    "ImageStyle": {
      "prefix": "Eimagestyle",
      "body": [
        "$this->add_responsive_control(",
        "    'image_height',",
        "    [",
        "        'label' => esc_html__('Height', 'plugin-name'),",
        "        'type' => Controls_Manager::SLIDER,",
        "        'size_units' => ['px', '%'],",
        "        'description' => esc_html__('Choose height in px or %', 'plugin-name'),",
        "        'selectors' => [",
        "            '{{WRAPPER}} .selector img' => 'height: {{SIZE}}{{UNIT}};',",
        "        ],",
        "        'default' => [",
        "            'unit' => 'px',",
        "        ],",
        "    ]",
        ");",
        "",
        "$this->add_responsive_control(",
        "    'image_width',",
        "    [",
        "        'label' => esc_html__('Width', 'plugin-name'),",
        "        'type' => Controls_Manager::SLIDER,",
        "        'size_units' => ['px', '%'],",
        "        'description' => esc_html__('Choose width in px or %', 'plugin-name'),",
        "        'selectors' => [",
        "            '{{WRAPPER}} .selector img' => 'width: {{SIZE}}{{UNIT}};',",
        "        ],",
        "        'default' => [",
        "            'unit' => 'px',",
        "        ],",
        "    ]",
        ");",
        "",
        "$this->add_responsive_control(",
        "    'image_border_radius',",
        "    [",
        "        'label' => esc_html__('Border Radius', 'plugin-name'),",
        "        'type' => Controls_Manager::DIMENSIONS,",
        "        'size_units' => ['px', '%'],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .selector img' => 'border-radius: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Adds image height, width, and border radius controls"
    },
    "NavigationStyle": {
      "prefix": "Eswipernav",
      "body": [
        "$this->add_control(",
        "    'navigation_color',",
        "    [",
        "        'label' => esc_html__('Color', 'plugin-name'),",
        "        'type' => \\Elementor\\Controls_Manager::COLOR,",
        "        'selectors' => [",
        "            '{{WRAPPER}} .swiper-prev i, .swiper-next i' => 'color: {{VALUE}}; border:1px solid {{VALUE}}',",
        "        ],",
        "    ]",
        ");",
        "",
        "$this->add_control(",
        "    'navigation_color_hover',",
        "    [",
        "        'label' => esc_html__('Hover Icon Color', 'plugin-name'),",
        "        'type' => \\Elementor\\Controls_Manager::COLOR,",
        "        'selectors' => [",
        "            '{{WRAPPER}} .swiper-prev i:hover, .swiper-next i:hover' => 'color: {{VALUE}}',",
        "        ],",
        "    ]",
        ");",
        "",
        "$this->add_control(",
        "    'navigation_color_bg_hover',",
        "    [",
        "        'label' => esc_html__('Hover Background Color', 'plugin-name'),",
        "        'type' => \\Elementor\\Controls_Manager::COLOR,",
        "        'selectors' => [",
        "            '{{WRAPPER}} .swiper-prev i:hover, .swiper-next i:hover' => 'background: {{VALUE}}; border:1px solid {{VALUE}}',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Adds navigation color and hover styles"
    },
    "TypographyColor": {
      "prefix": "Etypotwo",
      "body": [
        "$this->add_group_control(",
        "    Group_Control_Typography::get_type(),",
        "    [",
        "        'label' => esc_html__('Typography', 'plugin-name'),",
        "        'name' => '_typ',",
        "        'selector' => '{{WRAPPER}} .title',",
        "    ]",
        ");",
        "",
        "$this->add_control(",
        "    '_color',",
        "    [",
        "        'label' => esc_html__('Color', 'plugin-name'),",
        "        'type' => Controls_Manager::COLOR,",
        "        'selectors' => [",
        "            '{{WRAPPER}} .title' => 'color: {{VALUE}} !important;',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Adds typography and color controls"
    },
    "SubtitleStyle": {
      "prefix": "Esubtitlestyle",
      "body": [
        "$this->add_group_control(",
        "    Group_Control_Typography::get_type(),",
        "    [",
        "        'label' => esc_html__('Typography', 'plugin-name'),",
        "        'name' => 'subtitle_typ',",
        "        'selector' => '{{WRAPPER}} .subtitle',",
        "    ]",
        ");",
        "",
        "$this->add_control(",
        "    'subtitle_color',",
        "    [",
        "        'label' => esc_html__('Color', 'plugin-name'),",
        "        'type' => Controls_Manager::COLOR,",
        "        'selectors' => [",
        "            '{{WRAPPER}} .subtitle' => 'color: {{VALUE}} !important;',",
        "        ],",
        "    ]",
        ");",
        "$this->add_responsive_control(",
        "    'subtitle_margin',",
        "    [",
        "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%', 'em' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .subtitle' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
        "        ],",
        "    ]",
        ");",
        "",
        "$this->add_responsive_control(",
        "    'subtitle_padding',",
        "    [",
        "        'label' => esc_html__( 'Padding', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .subtitle' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Styles subtitle with typography, color, and spacing"
    },
    "TitleStyle": {
      "prefix": "Etitlestyle",
      "body": [
        "$this->add_group_control(",
        "    Group_Control_Typography::get_type(),",
        "    [",
        "        'label' => esc_html__('Typography', 'plugin-name'),",
        "        'name' => 'title_typ',",
        "        'selector' => '{{WRAPPER}} .title',",
        "    ]",
        ");",
        "",
        "$this->add_control(",
        "    'title_color',",
        "    [",
        "        'label' => esc_html__('Color', 'plugin-name'),",
        "        'type' => Controls_Manager::COLOR,",
        "        'selectors' => [",
        "            '{{WRAPPER}} .title' => 'color: {{VALUE}} !important;',",
        "        ],",
        "    ]",
        ");",
        "$this->add_responsive_control(",
        "    'title_margin',",
        "    [",
        "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%', 'em' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .title' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
        "        ],",
        "    ]",
        ");",
        "",
        "$this->add_responsive_control(",
        "    'title_padding',",
        "    [",
        "        'label' => esc_html__( 'Padding', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .title' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Styles title with typography, color, and spacing"
    },
    "DescriptionStyle": {
      "prefix": "Edescriptionstyle",
      "body": [
        "$this->add_group_control(",
        "    Group_Control_Typography::get_type(),",
        "    [",
        "        'label' => esc_html__('Typography', 'plugin-name'),",
        "        'name' => 'description_typ',",
        "        'selector' => '{{WRAPPER}} .description',",
        "    ]",
        ");",
        "",
        "$this->add_control(",
        "    'description_color',",
        "    [",
        "        'label' => esc_html__('Color', 'plugin-name'),",
        "        'type' => Controls_Manager::COLOR,",
        "        'selectors' => [",
        "            '{{WRAPPER}} .description' => 'color: {{VALUE}} !important;',",
        "        ],",
        "    ]",
        ");",
        "$this->add_responsive_control(",
        "    'description_margin',",
        "    [",
        "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%', 'em' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .description' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
        "        ],",
        "    ]",
        ");",
        "",
        "$this->add_responsive_control(",
        "    'description_padding',",
        "    [",
        "        'label' => esc_html__( 'Padding', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .description' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Styles description with typography, color, and spacing"
    },
    "SubheadingStyle": {
      "prefix": "Esubheadingstyle",
      "body": [
        "$this->add_group_control(",
        "    Group_Control_Typography::get_type(),",
        "    [",
        "        'label' => esc_html__('Typography', 'plugin-name'),",
        "        'name' => 'subheading_typ',",
        "        'selector' => '{{WRAPPER}} .subheading',",
        "    ]",
        ");",
        "",
        "$this->add_control(",
        "    'subheading_color',",
        "    [",
        "        'label' => esc_html__('Color', 'plugin-name'),",
        "        'type' => Controls_Manager::COLOR,",
        "        'selectors' => [",
        "            '{{WRAPPER}} .subheading' => 'color: {{VALUE}} !important;',",
        "        ],",
        "    ]",
        ");",
        "$this->add_responsive_control(",
        "    'subheading_margin',",
        "    [",
        "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%', 'em' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .subheading' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
        "        ],",
        "    ]",
        ");",
        "",
        "$this->add_responsive_control(",
        "    'subheading_padding',",
        "    [",
        "        'label' => esc_html__( 'Padding', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .subheading' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Styles subheading with typography, color, and spacing"
    },
    "HeadingStyle": {
      "prefix": "Eheadingstyle",
      "body": [
        "$this->add_group_control(",
        "    Group_Control_Typography::get_type(),",
        "    [",
        "        'label' => esc_html__('Typography', 'plugin-name'),",
        "        'name' => 'heading_typ',",
        "        'selector' => '{{WRAPPER}} .heading',",
        "    ]",
        ");",
        "",
        "$this->add_control(",
        "    'heading_color',",
        "    [",
        "        'label' => esc_html__('Color', 'plugin-name'),",
        "        'type' => Controls_Manager::COLOR,",
        "        'selectors' => [",
        "            '{{WRAPPER}} .heading' => 'color: {{VALUE}} !important;',",
        "        ],",
        "    ]",
        ");",
        "$this->add_responsive_control(",
        "    'heading_margin',",
        "    [",
        "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%', 'em' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .heading' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
        "        ],",
        "    ]",
        ");",
        "",
        "$this->add_responsive_control(",
        "    'heading_padding',",
        "    [",
        "        'label' => esc_html__( 'Padding', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .heading' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Styles heading with typography, color, and spacing"
    },
    "HeadingTitleStyle": {
      "prefix": "Eheadingtitlestyle",
      "body": [
        "$this->add_group_control(",
        "    Group_Control_Typography::get_type(),",
        "    [",
        "        'label' => esc_html__('Typography', 'plugin-name'),",
        "        'name' => 'headingtitle_typ',",
        "        'selector' => '{{WRAPPER}} .headingtitle',",
        "    ]",
        ");",
        "",
        "$this->add_control(",
        "    'headingtitle_color',",
        "    [",
        "        'label' => esc_html__('Color', 'plugin-name'),",
        "        'type' => Controls_Manager::COLOR,",
        "        'selectors' => [",
        "            '{{WRAPPER}} .headingtitle' => 'color: {{VALUE}} !important;',",
        "        ],",
        "    ]",
        ");",
        "$this->add_responsive_control(",
        "    'headingtitle_margin',",
        "    [",
        "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%', 'em' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .headingtitle' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
        "        ],",
        "    ]",
        ");",
        "",
        "$this->add_responsive_control(",
        "    'headingtitle_padding',",
        "    [",
        "        'label' => esc_html__( 'Padding', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .headingtitle' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Styles heading title with typography, color, and spacing"
    },
    "NameStyle": {
      "prefix": "Enamestyle",
      "body": [
        "$this->add_group_control(",
        "    Group_Control_Typography::get_type(),",
        "    [",
        "        'label' => esc_html__('Typography', 'plugin-name'),",
        "        'name' => 'name_typ',",
        "        'selector' => '{{WRAPPER}} .name',",
        "    ]",
        ");",
        "",
        "$this->add_control(",
        "    'name_color',",
        "    [",
        "        'label' => esc_html__('Color', 'plugin-name'),",
        "        'type' => Controls_Manager::COLOR,",
        "        'selectors' => [",
        "            '{{WRAPPER}} .name' => 'color: {{VALUE}};',",
        "        ],",
        "    ]",
        ");",
        "$this->add_responsive_control(",
        "    'name_margin',",
        "    [",
        "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%', 'em' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .name' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',",
        "        ],",
        "    ]",
        ");",
        "",
        "$this->add_responsive_control(",
        "    'name_padding',",
        "    [",
        "        'label' => esc_html__( 'Padding', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .name' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Styles name with typography, color, and spacing"
    },
    "PlaceStyle": {
      "prefix": "Eplacestyle",
      "body": [
        "$this->add_group_control(",
        "    Group_Control_Typography::get_type(),",
        "    [",
        "        'label' => esc_html__('Typography', 'plugin-name'),",
        "        'name' => 'place_typ',",
        "        'selector' => '{{WRAPPER}} .place',",
        "    ]",
        ");",
        "",
        "$this->add_control(",
        "    'place_color',",
        "    [",
        "        'label' => esc_html__('Color', 'plugin-name'),",
        "        'type' => Controls_Manager::COLOR,",
        "        'selectors' => [",
        "            '{{WRAPPER}} .place' => 'color: {{VALUE}};',",
        "        ],",
        "    ]",
        ");",
        "$this->add_responsive_control(",
        "    'place_margin',",
        "    [",
        "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%', 'em' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .place' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',",
        "        ],",
        "    ]",
        ");",
        "",
        "$this->add_responsive_control(",
        "    'place_padding',",
        "    [",
        "        'label' => esc_html__( 'Padding', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .place' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Styles place with typography, color, and spacing"
    },
    "DesignationStyle": {
      "prefix": "Edesignationstyle",
      "body": [
        "$this->add_group_control(",
        "    Group_Control_Typography::get_type(),",
        "    [",
        "        'label' => esc_html__('Typography', 'plugin-name'),",
        "        'name' => 'designation_typ',",
        "        'selector' => '{{WRAPPER}} .designation',",
        "    ]",
        ");",
        "",
        "$this->add_control(",
        "    'designation_color',",
        "    [",
        "        'label' => esc_html__('Color', 'plugin-name'),",
        "        'type' => Controls_Manager::COLOR,",
        "        'selectors' => [",
        "            '{{WRAPPER}} .designation' => 'color: {{VALUE}} !important;',",
        "        ],",
        "    ]",
        ");",
        "$this->add_responsive_control(",
        "    'designation_margin',",
        "    [",
        "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%', 'em' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .designation' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
        "        ],",
        "    ]",
        ");",
        "",
        "$this->add_responsive_control(",
        "    'designation_padding',",
        "    [",
        "        'label' => esc_html__( 'Padding', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .designation' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}} !important;',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Styles designation with typography, color, and spacing"
    },
    "DateStyle": {
      "prefix": "Edatestyle",
      "body": [
        "$this->add_group_control(",
        "    Group_Control_Typography::get_type(),",
        "    [",
        "        'label' => esc_html__('Typography', 'plugin-name'),",
        "        'name' => 'date_typ',",
        "        'selector' => '{{WRAPPER}} .date',",
        "    ]",
        ");",
        "",
        "$this->add_control(",
        "    'date_color',",
        "    [",
        "        'label' => esc_html__('Color', 'plugin-name'),",
        "        'type' => Controls_Manager::COLOR,",
        "        'selectors' => [",
        "            '{{WRAPPER}} .date' => 'color: {{VALUE}};',",
        "        ],",
        "    ]",
        ");",
        "$this->add_responsive_control(",
        "    'date_margin',",
        "    [",
        "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%', 'em' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .date' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',",
        "        ],",
        "    ]",
        ");",
        "",
        "$this->add_responsive_control(",
        "    'date_padding',",
        "    [",
        "        'label' => esc_html__( 'Padding', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .date' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',",
        "        ],",
        "    ]",
        ");"
      ],
      "description": "Styles date with typography, color, and spacing"
    },
    "CardStyle": {
      "prefix": "Ecardstyle",
      "body": [
        "$this->add_control(",
        "    'card_color',",
        "    [",
        "        'label' => esc_html__( 'Background Color', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::COLOR,",
        "        'selectors' => [",
        "            '{{WRAPPER}} .card' => 'background-color: {{VALUE}}',",
        "        ],",
        "    ]",
        ");",
        "",
        "$this->add_responsive_control(",
        "    'card_padding',",
        "    [",
        "        'label' => esc_html__( 'Padding', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .card' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',",
        "        ],",
        "    ]",
        ");",
        "",
        "$this->add_responsive_control(",
        "    'card_margin',",
        "    [",
        "        'label' => esc_html__( 'Margin', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%', 'em' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .card' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',",
        "        ],",
        "    ]",
        ");",
        "",
        "$this->add_responsive_control(",
        "    'card_border_radius',",
        "    [",
        "        'label' => esc_html__( 'Border Radius', 'plugin-name' ),",
        "        'type' => \\Elementor\\Controls_Manager::DIMENSIONS,",
        "        'size_units' => [ 'px', '%', 'em' ],",
        "        'selectors' => [",
        "            '{{WRAPPER}} .card' => 'border-radius: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',",
        "        ],",
        "    ]",
        ");",
        "",
        "$this->add_group_control(",
        "    Group_Control_Box_Shadow::get_type(),",
        "    [",
        "        'name' => 'card_box_shadow',",
        "        'selector' => '{{WRAPPER}} .card',",
        "    ]",
        ");",
        "",
        "$this->add_group_control(",
        "    Group_Control_Border::get_type(),",
        "    [",
        "        'name' => 'card_border',",
        "        'selector' => '{{WRAPPER}} .card',",
        "    ]",
        ");"
      ],
      "description": "Styles card with background, padding, margin, border radius, box shadow, and border"
    },
    "ConditionalShow": {
      "prefix": "Eshow",
      "body": [
        "<?php if( !empty( $settings[''] ) ) : ?>",
        "    <?php echo esc_html($settings['']) ?>",
        "<?php endif ?>"
      ],
      "description": "Conditionally displays settings value"
    },
    "BorderGroup": {
      "prefix": "Ebordergroup",
      "body": [
        "$this->add_group_control(",
        "    \\Elementor\\Group_Control_Border::get_type(),",
        "    [",
        "        'name' => '_border',",
        "        'label' => esc_html__('Border', 'plugin-name'),",
        "        'selector' => '{{WRAPPER}} .selector',",
        "    ]",
        ");"
      ],
      "description": "Adds a border group control"
    }
  },
  "WordPress": {
    "Title": {
      "prefix": "Wtitle",
      "body": ["<?php the_title(); ?>"],
      "description": "Outputs post/page title"
    },
    "Content": {
      "prefix": "Wcontent",
      "body": ["<?php the_content(); ?>"],
      "description": "Outputs post/page content"
    },
    "ThumbnailURL": {
      "prefix": "Wthumbnailurl",
      "body": ["<?php the_post_thumbnail_url(); ?>"],
      "description": "Outputs featured image URL"
    },
    "PostLoop": {
      "prefix": "Wloop",
      "body": [
        "<?php if ( have_posts() ) : ?>",
        "    <?php while ( have_posts() ) : the_post(); ?>",
        "        <!-- do stuff ... -->",
        "    <?php endwhile; ?>",
        "<?php endif; ?>"
      ],
      "description": "Standard WordPress loop"
    },
    "PostLoopSimple": {
      "prefix": "Wloopsimple",
      "body": [
        "<?php",
        "if ( have_posts() ) {",
        "    while ( have_posts() ) {",
        "        the_post();",
        "        ",
        "    }",
        "}",
        "?>"
      ],
      "description": "Simplified WordPress loop"
    },
    "PostIf": {
      "prefix": "Wif",
      "body": [
        "<?php if ( have_posts() ) : ?>",
        "<?php endif; ?>"
      ],
      "description": "Basic WordPress conditional check"
    },
    "ThemeURI": {
      "prefix": "Wthemeuri",
      "body": ["<?php echo get_template_directory_uri(); ?>/"],
      "description": "Outputs theme directory URI"
    },
    "ACFIf": {
      "prefix": "Wacfif",
      "body": [
        "<?php if( get_field('field_name') ): ?>",
        "    <p>My field value: <?php the_field('field_name'); ?></p>",
        "<?php endif; ?>"
      ],
      "description": "Conditional ACF field output"
    },
    "ACFForEach": {
      "prefix": "Wacfforeach",
      "body": [
        "<?php",
        "    $ff = get_field('contact_us_content','option');",
        "    foreach ($ff as $fff) {",
        "        ?>",
        "        <li><i class=\"fa <?php echo $fff['icon']; ?>\"></i><?php echo $fff['info']; ?></li>",
        "        <?php",
        "    }",
        "?>"
      ],
      "description": "Loops through ACF repeater field"
    },
    "PluginHeader": {
      "prefix": "Wpluginheader",
      "body": [
        "/**",
        " * Plugin Name:       My Basics Plugin",
        " * Plugin URI:        https://example.com/plugins/the-basics/",
        " * Description:       Handle the basics with this plugin.",
        " * Version:           1.10.3",
        " * Requires at least: 5.2",
        " * Requires PHP:      7.2",
        " * Author:            John Smith",
        " * Author URI:        https://author.example.com/",
        " * License:           GPL v2 or later",
        " * License URI:       https://www.gnu.org/licenses/gpl-2.0.html",
        " * Update URI:        https://example.com/my-plugin/",
        " * Text Domain:       my-basics-plugin",
        " * Domain Path:       /languages",
        " */"
      ],
      "description": "Plugin header comment"
    },
    "PluginHooks": {
      "prefix": "Wpluginhooks",
      "body": [
        "function wordcount_activation_hook() {",
        "}",
        "register_activation_hook( __FILE__, 'wordcount_activation_hook' );",
        "",
        "function wordcount_deactivation_hook() {",
        "}",
        "register_deactivation_hook( __FILE__, 'wordcount_deactivation_hook' );"
      ],
      "description": "Plugin activation/deactivation hooks"
    }
  },
  "JavaScript": {
    "Style": {
      "prefix": "Jstyle",
      "body": ["document.getElementById('demo').style.color = 'red';"],
      "description": "Changes element style (color)"
    },
    "InnerHTML": {
      "prefix": "Jinnerhtml",
      "body": ["document.getElementById('demo').innerHTML = 'Hello JavaScript!';"],
      "description": "Sets element innerHTML"
    },
    "ClassHTML": {
      "prefix": "Jclasshtml",
      "body": ["document.getElementsByClassName('demo')[0].innerHTML = 'Hello JavaScript!';"],
      "description": "Sets innerHTML for first element by class"
    },
    "Src": {
      "prefix": "Jsrc",
      "body": ["document.getElementById('a').src = 'on.gif';"],
      "description": "Changes image source"
    },
    "Write": {
      "prefix": "Jwrite",
      "body": ["document.write();"],
      "description": "Writes content to document"
    },
    "QuerySelector": {
      "prefix": "Jqueryselector",
      "body": ["document.querySelector('.example').style.backgroundColor = 'red';"],
      "description": "Sets style via querySelector"
    },
    "EventListener": {
      "prefix": "Jeventlistener",
      "body": [
        "document.getElementById('myBtn').addEventListener('click', work);",
        "",
        "function work() {",
        "    document.getElementById('demo').innerHTML = Date();",
        "}"
      ],
      "description": "Adds a click event listener"
    },
    "ConsoleLog": {
      "prefix": "Jlog",
      "body": ["console.log($1);"],
      "description": "Logs to console"
    },
    "ForEach": {
      "prefix": "Jforeach",
      "body": [
        "array.forEach(function(element) {",
        "    console.log(element);",
        "});"
      ],
      "description": "JavaScript forEach loop"
    }
  },
  "PHP": {
    "Function": {
      "prefix": "Pfunction",
      "body": [
        "function ${1:function_name}() {",
        "    $2",
        "}"
      ],
      "description": "Creates a PHP function"
    },
    "If": {
      "prefix": "Pif",
      "body": [
        "if ($1) {",
        "    $2",
        "}"
      ],
      "description": "PHP if statement"
    },
    "ForEach": {
      "prefix": "Pforeach",
      "body": [
        "foreach ($${1:array} as $${2:item}) {",
        "    $3",
        "}"
      ],
      "description": "PHP foreach loop"
    },
    "Echo": {
      "prefix": "Pecho",
      "body": ["echo $1;"],
      "description": "PHP echo statement"
    },
    "Variable": {
      "prefix": "Pvar",
      "body": ["$${1:variable} = $2;"],
      "description": "Declares a PHP variable"
    },
    "Array": {
      "prefix": "Parray",
      "body": ["$${1:array} = [$2];"],
      "description": "Creates a PHP array"
    },
    "Class": {
      "prefix": "Pclass",
      "body": [
        "class ${1:ClassName} {",
        "    public function __construct() {",
        "        $2",
        "    }",
        "}"
      ],
      "description": "Creates a PHP class with constructor"
    }
  },
  "Utility": {
    "EscapedTranslation": {
      "prefix": "Uesc",
      "body": [
        "esc_html__( '${1:text}', '${2:text-domain}' )"
      ],
      "description": "Escaped translation"
    },
    "SanitizeHTML": {
      "prefix": "Ukses",
      "body": [
        "wp_kses( \$${1:content}, wp_kses_allowed_html( 'post' ) )"
      ],
      "description": "Sanitize HTML output"
    },
    "IssetCheck": {
      "prefix": "Uisset",
      "body": [
        "<?php if ( isset( \$${1:variable} ) : ?>",
        "\t${2}",
        "<?php endif; ?>"
      ],
      "description": "Check if variable exists"
    }
  },
  "Miscellaneous": {
    "Array": {
      "prefix": "Marray",
      "body": ["let ${1:array} = [$2];"],
      "description": "Creates a JavaScript array"
    },
    "String": {
      "prefix": "Mstring",
      "body": ["let ${1:string} = '$2';"],
      "description": "Declares a JavaScript string"
    }
  }
}